{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Copy of Probabilistic ML (Winter 2022): Homework 4: Variational Autoencoders","provenance":[{"file_id":"1VIPUt0dXMOr1T3rNKKIR2WJ9Au8mK66B","timestamp":1648618852574},{"file_id":"1YVgkyPZJy49Qp8mWwp3sUDz5jvIJ5mR2","timestamp":1648480943923},{"file_id":"1cZ74I3VZ3lDVbI0gLWF4dlZHYpcsLRyt","timestamp":1648167255421},{"file_id":"13zHEPU3AQNveSnDAZ2VJqsSKKzO8Liml","timestamp":1644209147522}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"accelerator":"GPU","widgets":{"application/vnd.jupyter.widget-state+json":{"a69d290a48934e8db652e3afc5bb6c28":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_92cfc96f323e4853b86d01b6cf11f49c","IPY_MODEL_3df2e54392c1459ba119d89bfcc0e521","IPY_MODEL_2f04367d330d4a65b3c8a1ec95501146"],"layout":"IPY_MODEL_e258bdc2ebc6423aac2f1ccd446af99e"}},"92cfc96f323e4853b86d01b6cf11f49c":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_2370c4d4a6b0463aa977ab02314ecc0d","placeholder":"​","style":"IPY_MODEL_0f055ef32fe042c4a0445b8673f91a23","value":"100%"}},"3df2e54392c1459ba119d89bfcc0e521":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_c88f547ea05d4cb49e20a14c3446b80b","max":2000,"min":0,"orientation":"horizontal","style":"IPY_MODEL_e50e066a944b417d999b5d59690a3f0c","value":2000}},"2f04367d330d4a65b3c8a1ec95501146":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_bb60c90c9a374f76b9e92313c210ac45","placeholder":"​","style":"IPY_MODEL_2dae452fe4984fda852a6e1ba4e4a542","value":" 2000/2000 [00:23&lt;00:00, 114.35it/s]"}},"e258bdc2ebc6423aac2f1ccd446af99e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"2370c4d4a6b0463aa977ab02314ecc0d":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"0f055ef32fe042c4a0445b8673f91a23":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"c88f547ea05d4cb49e20a14c3446b80b":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e50e066a944b417d999b5d59690a3f0c":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"bb60c90c9a374f76b9e92313c210ac45":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"2dae452fe4984fda852a6e1ba4e4a542":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"ef0b38118cb44ac49dd2d8442510853c":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_8558c0fe44514acea8f09344f5c667c3","IPY_MODEL_a51294fca35e4b43b49c9a07667d6615","IPY_MODEL_d9ebcb8c41844770a7ec811d0afcd00d"],"layout":"IPY_MODEL_1ec714c8d88849d28ff2dcd424eaddbf"}},"8558c0fe44514acea8f09344f5c667c3":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_e91565b79f9e4651bc4bf89d6b3f21bd","placeholder":"​","style":"IPY_MODEL_bbab5885b10643f895d315401b560d96","value":"100%"}},"a51294fca35e4b43b49c9a07667d6615":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_f6db64ae55a440aea7af5b188232c2c3","max":5000,"min":0,"orientation":"horizontal","style":"IPY_MODEL_721edf679e1240aa85076d330cc82dc6","value":5000}},"d9ebcb8c41844770a7ec811d0afcd00d":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_650ffe8813c2423e8da69440282f42e1","placeholder":"​","style":"IPY_MODEL_e30e6fe3b26f434ebb1487e5e38d9f1c","value":" 5000/5000 [00:57&lt;00:00, 105.82it/s]"}},"1ec714c8d88849d28ff2dcd424eaddbf":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e91565b79f9e4651bc4bf89d6b3f21bd":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"bbab5885b10643f895d315401b560d96":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"f6db64ae55a440aea7af5b188232c2c3":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"721edf679e1240aa85076d330cc82dc6":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"650ffe8813c2423e8da69440282f42e1":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e30e6fe3b26f434ebb1487e5e38d9f1c":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"5d97e84c20f849df92d08c1f6af00e2c":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_0a5b23a032294109bbb037d89f3ce5cc","IPY_MODEL_d30feccb12134aad9f8ab904dfed1f06","IPY_MODEL_b6b6272a805349398285f9d9c939d3ed"],"layout":"IPY_MODEL_efa148a9393e45bba0c741903c19db87"}},"0a5b23a032294109bbb037d89f3ce5cc":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_0489c568ce1f407bad29f6810220571a","placeholder":"​","style":"IPY_MODEL_3f7dde58d297459e94eff68ac4639f87","value":"100%"}},"d30feccb12134aad9f8ab904dfed1f06":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_b3bcac53a72349bf89ae71e72625033c","max":5000,"min":0,"orientation":"horizontal","style":"IPY_MODEL_a38c3e9d61f441ab9fac6a0ee21af25f","value":5000}},"b6b6272a805349398285f9d9c939d3ed":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_5b1ea6bd72a7401fb8e87db67eef1791","placeholder":"​","style":"IPY_MODEL_6ce154f180f5431cb498ee6cb68f0da1","value":" 5000/5000 [01:02&lt;00:00, 111.57it/s]"}},"efa148a9393e45bba0c741903c19db87":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"0489c568ce1f407bad29f6810220571a":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"3f7dde58d297459e94eff68ac4639f87":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"b3bcac53a72349bf89ae71e72625033c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"a38c3e9d61f441ab9fac6a0ee21af25f":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"5b1ea6bd72a7401fb8e87db67eef1791":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"6ce154f180f5431cb498ee6cb68f0da1":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"d0573a7640d94b6a9c58ead35bd7533c":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_0dbbf331072d4190bd4305b62d53c350","IPY_MODEL_724312ed977b44b9bbe48feef592c145","IPY_MODEL_4d80a260d0e149e18c19f21c6576ca60"],"layout":"IPY_MODEL_b42aa74146604fd69a9dea5f394dd36c"}},"0dbbf331072d4190bd4305b62d53c350":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_613eb58ac175433e813d0158bdf98b8f","placeholder":"​","style":"IPY_MODEL_6f6b5b5363714cffa64fb2e924ed87e2","value":"100%"}},"724312ed977b44b9bbe48feef592c145":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_2a272bf092914bf8b7b2b738aaad4b06","max":100,"min":0,"orientation":"horizontal","style":"IPY_MODEL_23603d577412402fbd4ddaba6224cf4c","value":100}},"4d80a260d0e149e18c19f21c6576ca60":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_e405babd70974edf83a2510883f363af","placeholder":"​","style":"IPY_MODEL_4e3b0ece535448758926c06061429ac5","value":" 100/100 [00:01&lt;00:00, 88.99it/s]"}},"b42aa74146604fd69a9dea5f394dd36c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"613eb58ac175433e813d0158bdf98b8f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"6f6b5b5363714cffa64fb2e924ed87e2":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"2a272bf092914bf8b7b2b738aaad4b06":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"23603d577412402fbd4ddaba6224cf4c":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"e405babd70974edf83a2510883f363af":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"4e3b0ece535448758926c06061429ac5":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"b465c6b7e29447af93f269dfea026322":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_f3bea710cd94449baaee82feab67def0","IPY_MODEL_3f040981e83948d58f5a09ec51757b22","IPY_MODEL_244d51dd27f54e9f9960da3953c185fc"],"layout":"IPY_MODEL_77aacb0d5f7743f5b9ad75fdbbe3da79"}},"f3bea710cd94449baaee82feab67def0":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_96ccbac7068240abad12e34c5c613826","placeholder":"​","style":"IPY_MODEL_427b2752ed234c6cab24ffad1c4276e2","value":"100%"}},"3f040981e83948d58f5a09ec51757b22":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_348a8d59f14841908ce2bb2c4a4a4165","max":100,"min":0,"orientation":"horizontal","style":"IPY_MODEL_aeac106b1e8a4387bcadbe9f94f2a56d","value":100}},"244d51dd27f54e9f9960da3953c185fc":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_623b35383de04df7bd6c356dae07185f","placeholder":"​","style":"IPY_MODEL_f7665bcded254821aa85fa6aacd529bf","value":" 100/100 [00:00&lt;00:00, 117.43it/s]"}},"77aacb0d5f7743f5b9ad75fdbbe3da79":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"96ccbac7068240abad12e34c5c613826":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"427b2752ed234c6cab24ffad1c4276e2":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"348a8d59f14841908ce2bb2c4a4a4165":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"aeac106b1e8a4387bcadbe9f94f2a56d":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"623b35383de04df7bd6c356dae07185f":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f7665bcded254821aa85fa6aacd529bf":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"3eb4d85fcc0149819634ea6982a93182":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_b8ea08e1fbd74fb196657f0b317879db","IPY_MODEL_9f94312d2ca44e7eb37c3f3872fa91ca","IPY_MODEL_1a5ca15ce7a2429db0b3bb957baf3682"],"layout":"IPY_MODEL_188f414573594cc1bfb7377d97c09f5a"}},"b8ea08e1fbd74fb196657f0b317879db":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_18b167c4d06549ba95c54c57e6b3eb15","placeholder":"​","style":"IPY_MODEL_23156773e365404c91b111dccbb04fa7","value":"100%"}},"9f94312d2ca44e7eb37c3f3872fa91ca":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_1bbc8f1ed8e549b7b70827860ebb2461","max":100,"min":0,"orientation":"horizontal","style":"IPY_MODEL_5440e1f8b0864cca93ccccb0e016f703","value":100}},"1a5ca15ce7a2429db0b3bb957baf3682":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_9fe83f6ebbb64622a15ce12c4469756a","placeholder":"​","style":"IPY_MODEL_f37b23f639b34903a1ba75012b363290","value":" 100/100 [00:00&lt;00:00, 109.57it/s]"}},"188f414573594cc1bfb7377d97c09f5a":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"18b167c4d06549ba95c54c57e6b3eb15":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"23156773e365404c91b111dccbb04fa7":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"1bbc8f1ed8e549b7b70827860ebb2461":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"5440e1f8b0864cca93ccccb0e016f703":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"9fe83f6ebbb64622a15ce12c4469756a":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f37b23f639b34903a1ba75012b363290":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"f605c283c5d24928a6283d2305b71d29":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_6d4f49480eb246bcbffd74f9a8cd5fbb","IPY_MODEL_b19d0be2135f4a6f900f0405da3a4682","IPY_MODEL_0e192c74a52147c984db25b337c87589"],"layout":"IPY_MODEL_953137058c2946f9a70688f57944df51"}},"6d4f49480eb246bcbffd74f9a8cd5fbb":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_3a88d7e3f0294753b310dea06146864e","placeholder":"​","style":"IPY_MODEL_d1053b0fc085494fa515c25b8c4e31f0","value":"100%"}},"b19d0be2135f4a6f900f0405da3a4682":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_aa007f9e14154e58a78bbcfe128781d0","max":100,"min":0,"orientation":"horizontal","style":"IPY_MODEL_0cf7934e8f004ef6adc8923df79cf918","value":100}},"0e192c74a52147c984db25b337c87589":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_5180ed29afca47b3a99213b43980e58a","placeholder":"​","style":"IPY_MODEL_bd8805847a6d4c699c37d42c91a06d6b","value":" 100/100 [00:00&lt;00:00, 116.08it/s]"}},"953137058c2946f9a70688f57944df51":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"3a88d7e3f0294753b310dea06146864e":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"d1053b0fc085494fa515c25b8c4e31f0":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"aa007f9e14154e58a78bbcfe128781d0":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"0cf7934e8f004ef6adc8923df79cf918":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"5180ed29afca47b3a99213b43980e58a":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"bd8805847a6d4c699c37d42c91a06d6b":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"62befcf8196943bd88e3fdf207a0a999":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_5eb5770ee3a44c0080419fa32ce1bc18","IPY_MODEL_619e8e218fab4d4c8252ffa8af160f7b","IPY_MODEL_3ed65cb75f604032be07e3293cd47fe6"],"layout":"IPY_MODEL_a973ebd288634bd3a470e29517ea51fb"}},"5eb5770ee3a44c0080419fa32ce1bc18":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_feb36638dc7e4cc599362db7b2945e23","placeholder":"​","style":"IPY_MODEL_bbbb9735594c4cf1bfd8305d5ca4a619","value":"100%"}},"619e8e218fab4d4c8252ffa8af160f7b":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_2229373c0ce84d44b05e86275ff9327c","max":5000,"min":0,"orientation":"horizontal","style":"IPY_MODEL_1e1dad63e0c14e47b0e9b720a4087b11","value":5000}},"3ed65cb75f604032be07e3293cd47fe6":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_542f78af25d44c209b4e63a5f2cb3753","placeholder":"​","style":"IPY_MODEL_abc20f9bae0b480c969602ccf345ff75","value":" 5000/5000 [00:54&lt;00:00, 104.81it/s]"}},"a973ebd288634bd3a470e29517ea51fb":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"feb36638dc7e4cc599362db7b2945e23":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"bbbb9735594c4cf1bfd8305d5ca4a619":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"2229373c0ce84d44b05e86275ff9327c":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"1e1dad63e0c14e47b0e9b720a4087b11":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"542f78af25d44c209b4e63a5f2cb3753":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"abc20f9bae0b480c969602ccf345ff75":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"1b40039a8fbb461497360daa4f9a26f0":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_e0e5564a277246a395ae278a6a7008d5","IPY_MODEL_b41a1dee3a3949b0bf55e6f78a71bb55","IPY_MODEL_4167e992382641f4b7fc142b1b17746b"],"layout":"IPY_MODEL_1f64634cf82e4a7fb1ce80e3cec7a026"}},"e0e5564a277246a395ae278a6a7008d5":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_a752aa8cf72445da8e7a90ba41dddada","placeholder":"​","style":"IPY_MODEL_ed9f2c93a4154706a6363aba069794e3","value":"100%"}},"b41a1dee3a3949b0bf55e6f78a71bb55":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_0c9b0904a67e435f84ad2a746541b4a8","max":5000,"min":0,"orientation":"horizontal","style":"IPY_MODEL_0b88d19e4cac43c6ba6a0a9cf423efef","value":5000}},"4167e992382641f4b7fc142b1b17746b":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_a8186933616245c3bce40493515b2b29","placeholder":"​","style":"IPY_MODEL_19385121cbd64b5ba6aea1ef84f5aa86","value":" 5000/5000 [01:02&lt;00:00, 94.16it/s]"}},"1f64634cf82e4a7fb1ce80e3cec7a026":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"a752aa8cf72445da8e7a90ba41dddada":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"ed9f2c93a4154706a6363aba069794e3":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"0c9b0904a67e435f84ad2a746541b4a8":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"0b88d19e4cac43c6ba6a0a9cf423efef":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"a8186933616245c3bce40493515b2b29":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"19385121cbd64b5ba6aea1ef84f5aa86":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"5896ab0629ad445d9b9414735429c025":{"model_module":"@jupyter-widgets/controls","model_name":"HBoxModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HBoxModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HBoxView","box_style":"","children":["IPY_MODEL_7a0dab329df148a0b1be335913efb677","IPY_MODEL_d8d724093dfd40d5bd4b8d038d4690cd","IPY_MODEL_dcc116a7ba364cd38caf2a5b96e2c2d9"],"layout":"IPY_MODEL_fd5c451ed41f4bad92513655b1a7346a"}},"7a0dab329df148a0b1be335913efb677":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_9e9424fea9b244b0adf80f7f01433b2b","placeholder":"​","style":"IPY_MODEL_f1702554513e44ad8eeb106039f19e46","value":"100%"}},"d8d724093dfd40d5bd4b8d038d4690cd":{"model_module":"@jupyter-widgets/controls","model_name":"FloatProgressModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"FloatProgressModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"ProgressView","bar_style":"success","description":"","description_tooltip":null,"layout":"IPY_MODEL_bf0319ac0664401e80f60eebc6448a8a","max":5000,"min":0,"orientation":"horizontal","style":"IPY_MODEL_e854a7eab6644a1db2771af65e0770fe","value":5000}},"dcc116a7ba364cd38caf2a5b96e2c2d9":{"model_module":"@jupyter-widgets/controls","model_name":"HTMLModel","model_module_version":"1.5.0","state":{"_dom_classes":[],"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"HTMLModel","_view_count":null,"_view_module":"@jupyter-widgets/controls","_view_module_version":"1.5.0","_view_name":"HTMLView","description":"","description_tooltip":null,"layout":"IPY_MODEL_51f0b91bc33a45af9bf1106ad72ff21a","placeholder":"​","style":"IPY_MODEL_98dca5d38bad4fec91f03be26ed87ddc","value":" 5000/5000 [00:54&lt;00:00, 105.02it/s]"}},"fd5c451ed41f4bad92513655b1a7346a":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"9e9424fea9b244b0adf80f7f01433b2b":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"f1702554513e44ad8eeb106039f19e46":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}},"bf0319ac0664401e80f60eebc6448a8a":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"e854a7eab6644a1db2771af65e0770fe":{"model_module":"@jupyter-widgets/controls","model_name":"ProgressStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"ProgressStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","bar_color":null,"description_width":""}},"51f0b91bc33a45af9bf1106ad72ff21a":{"model_module":"@jupyter-widgets/base","model_name":"LayoutModel","model_module_version":"1.2.0","state":{"_model_module":"@jupyter-widgets/base","_model_module_version":"1.2.0","_model_name":"LayoutModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"LayoutView","align_content":null,"align_items":null,"align_self":null,"border":null,"bottom":null,"display":null,"flex":null,"flex_flow":null,"grid_area":null,"grid_auto_columns":null,"grid_auto_flow":null,"grid_auto_rows":null,"grid_column":null,"grid_gap":null,"grid_row":null,"grid_template_areas":null,"grid_template_columns":null,"grid_template_rows":null,"height":null,"justify_content":null,"justify_items":null,"left":null,"margin":null,"max_height":null,"max_width":null,"min_height":null,"min_width":null,"object_fit":null,"object_position":null,"order":null,"overflow":null,"overflow_x":null,"overflow_y":null,"padding":null,"right":null,"top":null,"visibility":null,"width":null}},"98dca5d38bad4fec91f03be26ed87ddc":{"model_module":"@jupyter-widgets/controls","model_name":"DescriptionStyleModel","model_module_version":"1.5.0","state":{"_model_module":"@jupyter-widgets/controls","_model_module_version":"1.5.0","_model_name":"DescriptionStyleModel","_view_count":null,"_view_module":"@jupyter-widgets/base","_view_module_version":"1.2.0","_view_name":"StyleView","description_width":""}}}}},"cells":[{"cell_type":"markdown","source":["# Probabilistic ML (Winter 2022): Homework 4: Variational Autoencoders\n","\n","- **Deadline**: April 8th, at 23:59.\n","- **Submission**: You need to submit your solutions through Crowdmark, including all your derivations, plots, and your code. You can produce the files however you like (e.g. $\\LaTeX$, Microsoft Word, etc), as long as it is readable. Points will be deducted if we have a hard time reading your solutions or understanding the structure of your code.\n","- **Collaboration policy**: After attempting the problems on an individual basis, you may discuss and work together on the assignment with up to two classmates. However, **you must write your own code and write up your own solutions individually and explicitly name any collaborators** at the top of the homework."],"metadata":{"id":"248_qtulv8jx"}},{"cell_type":"markdown","source":["## Version 2022/03/29\n","Q1.4 and Q2.1 key --> rng in objective fnc\n","## Your Info\n","\n","- **Name: Lisa Yu**\n","- **Student Number: 1005786366**\n","- **Collaborators: N/A**"],"metadata":{"id":"jdwwSaI3dswU"}},{"cell_type":"markdown","source":["## Question 1: Warm up with synthetic data - 30 points\n","\n","In this question, we will train a VAE on a synhetic data which resembles spirals in 2d. This question is intended to provided you some debugging tools for the next question where you work on MNIST dataset. In both of the questions, we will perform amortized inference with VAEs."],"metadata":{"id":"nDUMG4VJU4x5"}},{"cell_type":"code","source":["from jax import jit, grad, value_and_grad, lax, vmap, random\n","import jax.numpy as np\n","import jax.random\n","from jax.nn import softplus\n","import jax.nn.initializers as nn_init\n","from jax.experimental import optimizers, stax\n","from jax.experimental.stax import serial, parallel, Dense, Relu, FanOut, FanInSum, Softplus, Identity, Tanh\n","from jax.scipy.special import logsumexp\n","from jax.tree_util import register_pytree_node\n","\n","import tensorflow_probability as tfp\n","import tensorflow_probability.substrates.jax.distributions as dists\n","\n","from jax.config import config \n","config.update(\"jax_debug_nans\", True)\n","\n","import matplotlib.pyplot as plt\n","from tqdm.auto import trange\n","from jax.scipy.stats import norm\n","from functools import partial"],"metadata":{"id":"ZoD8ecKifL2y","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1649283523102,"user_tz":240,"elapsed":3687,"user":{"displayName":"Lisa Yu","userId":"02835623436724771541"}},"outputId":"91771d1e-17da-4fdb-ec92-a2be03496386"},"execution_count":1,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/jax/experimental/optimizers.py:30: FutureWarning: jax.experimental.optimizers is deprecated, import jax.example_libraries.optimizers instead\n","  FutureWarning)\n","/usr/local/lib/python3.7/dist-packages/jax/experimental/stax.py:30: FutureWarning: jax.experimental.stax is deprecated, import jax.example_libraries.stax instead\n","  FutureWarning)\n"]}]},{"cell_type":"markdown","source":["**1.1) [0 points]** The following functions can be used to visualize the output."],"metadata":{"id":"6bY5iE66Vq0N"}},{"cell_type":"code","source":["# Helper functions\n","# Plotting helper functions for free\n","def plot_isocontours(ax, func, xlimits=[-3, 3], ylimits=[-3, 3], numticks=101, cmap=\"summer\"):\n","    x = np.linspace(*xlimits, num=numticks)\n","    y = np.linspace(*ylimits, num=numticks)\n","    X, Y = np.meshgrid(x, y)\n","    zs = func(X.ravel(), Y.ravel())\n","    Z = zs.reshape(X.shape)\n","    plt.contour(X, Y, Z, cmap=cmap)\n","    ax.set_yticks([])\n","    ax.set_xticks([])\n","\n","def plot_2d_fun(f, x_axis_label=\"\", y_axis_label=\"\", f2=None, scatter_pts=None):\n","    # This is the function your code should call.\n","    # f() should take two arguments.\n","    fig = plt.figure(figsize=(8,8), facecolor='white')\n","    ax = fig.add_subplot(111, frameon=False)\n","    ax.set_xlabel(x_axis_label)\n","    ax.set_ylabel(y_axis_label)\n","    plot_isocontours(ax, f)\n","    if f2 is not None:\n","      plot_isocontours(ax, f2, cmap='winter')\n","\n","    if scatter_pts is not None:\n","      plt.scatter(scatter_pts[:,0], scatter_pts[:, 1])\n","    plt.plot([3, -3], [3, -3], 'b--')   # Line of equal skill\n","    plt.show(block=True)\n","    plt.draw()\n"],"metadata":{"id":"faO0Tjawhym-","executionInfo":{"status":"ok","timestamp":1649283523104,"user_tz":240,"elapsed":18,"user":{"displayName":"Lisa Yu","userId":"02835623436724771541"}}},"execution_count":2,"outputs":[]},{"cell_type":"markdown","source":["**1.2) [0 points]** Below function generates the synthetic spiral data."],"metadata":{"id":"S-NI6vCde9rg"}},{"cell_type":"code","source":["# Code to generate the pinwheel dataset.\n","# Taken from [Johnson et al (2016)], updated by Zhao & Linderman.\n","def make_pinwheel_data(rng, radial_std, tangential_std, num_classes, num_per_class, rate):\n","    rads = np.linspace(0, 2*np.pi, num_classes, endpoint=False)\n","\n","    features = jax.random.normal(rng, (num_classes*num_per_class, 2)) \\\n","        * np.array([radial_std, tangential_std])\n","    features = features.at[:, 0].add(1.0)\n","    labels = np.repeat(np.arange(num_classes), num_per_class)\n","\n","    angles = rads[labels] + rate * np.exp(features[:,0])\n","    rotations = np.stack([np.cos(angles), -np.sin(angles), np.sin(angles), np.cos(angles)])\n","    rotations = np.reshape(rotations.T, (-1, 2, 2))\n","\n","    return jax.random.permutation(rng,labels), jax.random.permutation(rng, np.einsum('ti,tij->tj', features, rotations))"],"metadata":{"id":"uyiFI2Aie9UH","executionInfo":{"status":"ok","timestamp":1649283525182,"user_tz":240,"elapsed":323,"user":{"displayName":"Lisa Yu","userId":"02835623436724771541"}}},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":["We visualize the 2d data generated from the above function. Notice that there are 3 clusters in the input space, each colored with a different color. The VAE will not see the cluster assignments, but we hope to recover this structure in the latent space."],"metadata":{"id":"_4HxOH1GWBno"}},{"cell_type":"code","source":["num_clusters = 3           \n","samples_per_cluster = 300\n","rng = jax.random.PRNGKey(0)\n","labels, data = make_pinwheel_data(rng, 0.3, 0.1, num_clusters, samples_per_cluster, 0.25)\n","\n","for k in range(num_clusters):\n","    plt.scatter(data[labels == k, 0], data[labels == k, 1], s=2)\n","\n","plt.axis(\"equal\")"],"metadata":{"id":"DUpKL-57dRR9","colab":{"base_uri":"https://localhost:8080/","height":334},"executionInfo":{"status":"ok","timestamp":1649283540296,"user_tz":240,"elapsed":13341,"user":{"displayName":"Lisa Yu","userId":"02835623436724771541"}},"outputId":"2e300616-a832-4b07-9a12-22250b7ff447"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(-1.7937924802303313,\n"," 1.8979793727397918,\n"," -2.059972715377808,\n"," 2.3492221355438234)"]},"metadata":{},"execution_count":4},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["**1.3) [20 points]** Implement the missing lines in the below code, to complete\n","the $\\texttt{elbo}$ function for a variational autoencoder.\n","\n","You can write all your functions to take a single datapoint, and just use vmap() to allow it to take batches.  For instance, this is done for you in the $\\texttt{batch_elbo}()$ function below.\n","\n","You can and should use the same code for both the spiral dataset and MNIST.  The spiral dataset and an example encoder / decoder is provided just to help you debug, and as a template for the MNIST VAE.\n"],"metadata":{"id":"QXlBa-8oFn9V"}},{"cell_type":"code","source":["# Generic VAE functions.\n","\n","def log_prior(z): \n","    return np.sum(norm.logpdf(z, 0.0, 1.0), axis=-1)\n","\n","def diag_gaussian_sample(rng, mean, log_std): \n","  # Take a single sample from a diagonal multivariate Gaussian.\n","  return mean + np.exp(log_std) * random.normal(rng, mean.shape)\n","\n","def diag_gaussian_logpdf(x, mean, log_std):\n","  # Evaluate a single point on a diagonal multivariate Gaussian.\n","  return np.sum(vmap(norm.logpdf)(x, mean, np.exp(log_std)))\n","\n","def elbo(  # Single-sample Monte Carlo estimate of the variational lower bound.\n","    recognition_net,    # takes recognition_params and a datapoint, outputs mean and log_std of size latent_dim, i.e. log q(z|x)\n","    log_joint,          # takes likelihood_params and a vector of size latent_dim and a datapoint, outputs unnormalized log joint, i.e. log p(x,z)\n","    recognition_params, # a.k.a. phi\n","    model_params,       # a.k.a. theta\n","    datapoint,          # a.k.a. x\n","    rng):\n","\n","  q_params = recognition_net(recognition_params, datapoint)      # TODO. Call recognition net.\n","  sample = diag_gaussian_sample(rng, *q_params)          # TODO. Sample z from approximate posterior.\n","  log_joint_value = log_joint(model_params, sample, datapoint) # TODO. Call log p(z, x).\n","  log_post_value = diag_gaussian_logpdf(sample, *q_params) # TODO. Evaluate density of log posterior q(z).\n","  elbo_hat = log_joint_value - log_post_value        # TODO. Produce an unbiased esimate of the ELBO.\n","  return elbo_hat\n","\n","def batch_elbo(recognition_net, log_joint, recognition_params,\n","               model_params, data, rng):\n","  # Average ELBO estimate over a batch of random samples.\n","  batch_size = data.shape[0]\n","  rngs = random.split(rng, batch_size)\n","  vectorized_elbo = vmap(partial(elbo, recognition_net, log_joint,\n","                                 recognition_params, model_params),\n","                         in_axes=(0, 0))\n","  return np.mean(vectorized_elbo(data, rngs))\n"],"metadata":{"id":"ChZZaRmqhkvu","executionInfo":{"status":"ok","timestamp":1649283547323,"user_tz":240,"elapsed":311,"user":{"displayName":"Lisa Yu","userId":"02835623436724771541"}}},"execution_count":5,"outputs":[]},{"cell_type":"markdown","source":["**1.4) [0 points]** The below code trains a VAE where the encoder and decoder are both neural networks. The parameters are specified in the starter code.  You don't need to do anything here, this is just to help you debug."],"metadata":{"id":"lOyXE8CCHNwT"}},{"cell_type":"code","source":["# Define a VAE for the spiral dataset.\n","\n","data_dimension = 2\n","latent_dimension = 2\n","key = random.PRNGKey(0)\n","\n","# Define the recognition network.\n","# We implement the functions as a split output of a 1-layer MLP\n","# https://github.com/google/jax/blob/master/jax/experimental/README.md#neural-net-building-with-stax\n","init_recognize, recognition_net = serial(\n","    Dense(100), \n","    Relu,\n","    Dense(50), \n","    Relu,\n","    FanOut(2),\n","    parallel(\n","        Dense(latent_dimension),   # Output mean of q(z)\n","        Dense(latent_dimension)    # Output log_std of q(z)\n","        )\n","    )\n","_, init_recognition_params = init_recognize(rng, input_shape=(data_dimension,))\n","\n","# Define the decoder network.\n","# Note that it has two outputs, a mean and a variance, because \n","# this model has a Gaussian likelihood p(x|z).\n","init_decoder, decoder = serial(\n","    Dense(100), \n","    Relu,\n","    Dense(50), \n","    Relu,\n","    FanOut(2),\n","    parallel(\n","        Dense(data_dimension),    # Output mean of p(x|z)\n","        Dense(data_dimension)     # Output log_std of p(x|z).\n","        )\n","    )\n","_, init_decoder_params = init_decoder(rng, input_shape=(latent_dimension,))\n","\n","# Set up log likelihood function.\n","def log_likelihood(decoder_params, latent, datapoint):\n","  mean, log_std = decoder(decoder_params, latent)\n","  return diag_gaussian_logpdf(datapoint, mean,\n","                              np.log(0.1) + 0. * log_std)  # Note: we are cheating here and using a fixed noise variance to make optimization more stable.\n","\n","def log_joint(decoder_params, latent, datapoint):\n","  return log_prior(latent) + log_likelihood(decoder_params, latent, datapoint)\n","\n","# Run optimization\n","optimizer=optimizers.adam\n","optimizer_kwargs=dict(step_size=1e-3)\n","n_iters = 2000\n","minibatch_size = 300\n","\n","opt_init, opt_update, get_params = optimizer(**optimizer_kwargs)\n","opt_state = opt_init((init_recognition_params, init_decoder_params))\n","\n","def objective(params, t):  # The loss function to be minimized.\n","  rng = random.PRNGKey(t)\n","  minibatch_ixs = random.choice(rng, data.shape[0], (minibatch_size,))\n","  minibatch = data[minibatch_ixs, :]\n","  recognition_params, decoder_params = params\n","  return -batch_elbo(\n","    recognition_net,\n","    log_joint,\n","    recognition_params,  # a.k.a. phi\n","    decoder_params,      # a.k.a. theta\n","    minibatch,\n","    rng)\n","\n","def callback(params, t):\n","  if t % 100 == 0:\n","    print(\"Iteration {} lower bound {}\".format(t, -objective(params, t)))\n","\n","@jit\n","def update(i, opt_state):\n","    params = get_params(opt_state) \n","    gradient = grad(objective)(params, i)\n","    return opt_update(i, gradient, opt_state)\n","\n","# Main loop.\n","print(\"Optimizing variational parameters...\")\n","for t in trange(0, n_iters):\n","    opt_state = update(t, opt_state)\n","    params = get_params(opt_state)\n","    callback(params, t)\n","\n","recognition_params, decoder_params = params"],"metadata":{"id":"OgGgHfUsmid6","colab":{"base_uri":"https://localhost:8080/","height":414,"referenced_widgets":["a69d290a48934e8db652e3afc5bb6c28","92cfc96f323e4853b86d01b6cf11f49c","3df2e54392c1459ba119d89bfcc0e521","2f04367d330d4a65b3c8a1ec95501146","e258bdc2ebc6423aac2f1ccd446af99e","2370c4d4a6b0463aa977ab02314ecc0d","0f055ef32fe042c4a0445b8673f91a23","c88f547ea05d4cb49e20a14c3446b80b","e50e066a944b417d999b5d59690a3f0c","bb60c90c9a374f76b9e92313c210ac45","2dae452fe4984fda852a6e1ba4e4a542"]},"executionInfo":{"status":"ok","timestamp":1649283577014,"user_tz":240,"elapsed":27118,"user":{"displayName":"Lisa Yu","userId":"02835623436724771541"}},"outputId":"f340652f-3c2a-4b8c-8467-b22b45df2149"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stdout","text":["Optimizing variational parameters...\n"]},{"output_type":"display_data","data":{"text/plain":["  0%|          | 0/2000 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"a69d290a48934e8db652e3afc5bb6c28"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Iteration 0 lower bound -53.33385467529297\n","Iteration 100 lower bound -3.6101717948913574\n","Iteration 200 lower bound -2.0128495693206787\n","Iteration 300 lower bound -2.1108903884887695\n","Iteration 400 lower bound -1.7522392272949219\n","Iteration 500 lower bound -1.572933316230774\n","Iteration 600 lower bound -1.5674941539764404\n","Iteration 700 lower bound -1.5202080011367798\n","Iteration 800 lower bound -1.4092899560928345\n","Iteration 900 lower bound -1.403257966041565\n","Iteration 1000 lower bound -1.2105753421783447\n","Iteration 1100 lower bound -1.3555247783660889\n","Iteration 1200 lower bound -1.066318154335022\n","Iteration 1300 lower bound -1.2990782260894775\n","Iteration 1400 lower bound -1.3205937147140503\n","Iteration 1500 lower bound -1.2189953327178955\n","Iteration 1600 lower bound -1.2963510751724243\n","Iteration 1700 lower bound -1.1924402713775635\n","Iteration 1800 lower bound -1.256577730178833\n","Iteration 1900 lower bound -1.0875200033187866\n"]}]},{"cell_type":"markdown","source":["1.5) [5 points] In this part, we visualize how the data looks like in the latent space. We simply use the trained recognition network (the encoder) to map each input to latent space.\n","\n","The result should look something like:\n","\n","![](https://drive.google.com/uc?id=1o1mlRp974jdDONZl8Gdz3FceqrMS--6E)"],"metadata":{"id":"ItI3GUaJH2o7"}},{"cell_type":"code","source":["# Show the means of the encoded data in a 2D latent space.\n","# Don't worry if this doesn't look much like a Gaussian.\n","\n","for k in range(num_clusters):\n","  cur_data = data[labels == k, :] # TODO\n","  transformed = recognition_net(recognition_params, cur_data)[0] # TODO\n","  plt.scatter(transformed[:, 0], transformed[:, 1], s=2)\n","\n","plt.axis(\"equal\")\n","plt.xlabel(\"latent dimension 1\")\n","plt.xlabel(\"latent dimension 2\")"],"metadata":{"id":"u5GjmVm636GK","colab":{"base_uri":"https://localhost:8080/","height":296},"executionInfo":{"status":"ok","timestamp":1649283591698,"user_tz":240,"elapsed":1135,"user":{"displayName":"Lisa Yu","userId":"02835623436724771541"}},"outputId":"8f926968-fbec-469a-f11a-0c1a53f78675"},"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/plain":["Text(0.5, 0, 'latent dimension 2')"]},"metadata":{},"execution_count":7},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["**1.6) [5 points]** Using the decoder and the generative model we just trained, we can generate new data. For this, we simply generate 1000 latent variables in the latent space from the prior and pass it through the decoder network.\n","\n","You shouldn't expect this to match the data exactly, just to get the overall shape and number of clusters roughly correct.  Counterintuitively, the larger and richer MNIST data is easier to fit than this toy dataset.\n","\n","The result should look something like:\n","\n","![](https://drive.google.com/uc?id=1AI691z1q82-zwbLlBv1-4UiO08wwEifx)"],"metadata":{"id":"FeSyYzKhINyK"}},{"cell_type":"code","source":["# Sample data from the trained generative model to see if it\n","# roughly matches the data.  # Note: This doesn't add the likelihood noise,\n","# although it should if we want it to match the data.\n","\n","num_samples = 1000\n","samples = diag_gaussian_sample(rng, np.zeros((num_samples, 2)), np.zeros((num_samples, 2))) # TODO\n","transformed = decoder(decoder_params, samples)[0] # TODO\n","plt.scatter(transformed[:, 0], transformed[:, 1], s=2)\n","plt.axis(\"equal\")"],"metadata":{"id":"YYm4QeiGk_Jm","colab":{"base_uri":"https://localhost:8080/","height":282},"executionInfo":{"status":"ok","timestamp":1649283638498,"user_tz":240,"elapsed":1809,"user":{"displayName":"Lisa Yu","userId":"02835623436724771541"}},"outputId":"d0827cde-ae5d-41a9-97f5-f915f6f7c5e0"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(-2.28639178276062, 1.5035400867462159, -1.897058469057083, 1.5913327753543853)"]},"metadata":{},"execution_count":8},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["**1.7) [0 points]** Here's a debugging tool only available when both the latent space and the data are both 2-dimensional.  We can show the function being learned by the encoder by showing how it warps a 2D grid into the latent space."],"metadata":{"id":"Z3ndLm3JggYd"}},{"cell_type":"code","source":["\n","from matplotlib.collections import LineCollection\n","\n","def plot_grid(x,y, ax=None, **kwargs):\n","    ax = ax or plt.gca()\n","    segs1 = np.stack((x,y), axis=2)\n","    segs2 = segs1.transpose(1,0,2)\n","    ax.add_collection(LineCollection(segs1, **kwargs))\n","    ax.add_collection(LineCollection(segs2, **kwargs))\n","    ax.autoscale()\n","\n","def f(x,y):\n","  return decoder(decoder_params, np.array([x, y]))\n","f = vmap(f, in_axes=(0,0))\n","f = vmap(f, in_axes=(0,0))\n","\n","fig, ax = plt.subplots()\n","\n","grid_x,grid_y = np.meshgrid(np.linspace(-3,3,20),np.linspace(-3,3,20))\n","plot_grid(grid_x,grid_y, ax=ax,  color=\"lightgrey\")\n","\n","distx, disty = f(grid_x,grid_y)\n","plot_grid(distx[:, :, 0], distx[:, :, 1], ax=ax, color=\"C0\")\n","\n","plt.show()"],"metadata":{"id":"UgdwiGrpsHRP","colab":{"base_uri":"https://localhost:8080/","height":265},"executionInfo":{"status":"ok","timestamp":1649283666812,"user_tz":240,"elapsed":1904,"user":{"displayName":"Lisa Yu","userId":"02835623436724771541"}},"outputId":"a5cc3dde-1c38-47c2-ca54-2e0effdaef56"},"execution_count":9,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["**1.8) [0 points]** Here, we show the function being learned by the decoder by showing how it warps a 2D grid into the observed space.\n","\n"],"metadata":{"id":"qX7XKlJLgqFz"}},{"cell_type":"code","source":["def f(x,y):\n","  return recognition_net(recognition_params, np.array([x, y]))\n","f = vmap(f, in_axes=(0,0))\n","f = vmap(f, in_axes=(0,0))\n","\n","fig, ax = plt.subplots()\n","\n","grid_x,grid_y = np.meshgrid(np.linspace(-3,3,20),np.linspace(-3,3,20))\n","plot_grid(grid_x,grid_y, ax=ax,  color=\"lightgrey\")\n","\n","distx, disty = f(grid_x,grid_y)\n","plot_grid(distx[:, :, 0], distx[:, :, 1], ax=ax, color=\"C0\")\n","\n","plt.show()"],"metadata":{"id":"DqkriclvSsaN","colab":{"base_uri":"https://localhost:8080/","height":265},"executionInfo":{"status":"ok","timestamp":1649283697085,"user_tz":240,"elapsed":928,"user":{"displayName":"Lisa Yu","userId":"02835623436724771541"}},"outputId":"72541e82-f013-4022-ed66-ebd2170d39ec"},"execution_count":10,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["# Question 2 - 45 points\n","\n","In this question, we will implement and investigate the Variational Autoencoder on binarized MNIST digits, as introduced by the paper [Auto-Encoding Variational Bayes](https://arxiv.org/pdf/1312.6114.pdf) by Kingma and Welling (2013).\n","\n","\n","**MNIST data**: Each datapoint in the [MNIST dataset](http://yann.lecun.com/exdb/mnist/) is a 28x28 grayscale image (i.e. pixels are values between 0 and 1) of a handwritten digit in $\\{0 \\dots 9\\}$, and a label indicating which number.\n","\n","The below code contains a function that downloads the MNIST data set and another one that can plot multiple images.\n"],"metadata":{"id":"ItRbxaGrXNDI"}},{"cell_type":"code","source":["# Load MNIST data\n","import os\n","import gzip\n","import struct\n","import array\n","import matplotlib.image\n","from urllib.request import urlretrieve\n","\n","def download(url, filename):\n","    if not os.path.exists('data'):\n","        os.makedirs('data')\n","    out_file = os.path.join('data', filename)\n","    if not os.path.isfile(out_file):\n","        urlretrieve(url, out_file)\n","\n","\n","def mnist():\n","    base_url = 'http://yann.lecun.com/exdb/mnist/'\n","\n","    def parse_labels(filename):\n","        with gzip.open(filename, 'rb') as fh:\n","            magic, num_data = struct.unpack(\">II\", fh.read(8))\n","            return np.array(array.array(\"B\", fh.read()), dtype=np.uint8)\n","\n","    def parse_images(filename):\n","        with gzip.open(filename, 'rb') as fh:\n","            magic, num_data, rows, cols = struct.unpack(\">IIII\", fh.read(16))\n","            return np.array(array.array(\"B\", fh.read()), dtype=np.uint8).reshape(num_data, rows, cols)\n","\n","    for filename in ['train-images-idx3-ubyte.gz',\n","                     'train-labels-idx1-ubyte.gz',\n","                     't10k-images-idx3-ubyte.gz',\n","                     't10k-labels-idx1-ubyte.gz']:\n","        download(base_url + filename, filename)\n","\n","    train_images = parse_images('data/train-images-idx3-ubyte.gz')\n","    train_labels = parse_labels('data/train-labels-idx1-ubyte.gz')\n","    test_images = parse_images('data/t10k-images-idx3-ubyte.gz')\n","    test_labels = parse_labels('data/t10k-labels-idx1-ubyte.gz')\n","\n","    return train_images, train_labels, test_images[:1000], test_labels[:1000]\n","\n","\n","def load_mnist():\n","    partial_flatten = lambda x: np.reshape(x, (x.shape[0], np.prod(np.array(x.shape[1:]))))\n","    one_hot = lambda x, k: np.array(x[:, None] == np.arange(k)[None, :], dtype=int)\n","    train_images, train_labels, test_images, test_labels = mnist()\n","    train_images = (partial_flatten(train_images) / 255.0 > .5).astype(float)\n","    test_images = (partial_flatten(test_images) / 255.0 > .5).astype(float)\n","    train_labels = one_hot(train_labels, 10)\n","    test_labels = one_hot(test_labels, 10)\n","    N_data = train_images.shape[0]\n","\n","    return N_data, train_images, train_labels, test_images, test_labels\n","\n","N_data, train_images, train_labels, test_images, test_labels = load_mnist()\n","\n","import numpy as onp\n","def plot_images(images, ims_per_row=5, padding=5, digit_dimensions=(28, 28),\n","                cmap=matplotlib.cm.binary, vmin=0., vmax=1.):\n","    \"\"\"Images should be a (N_images x pixels) matrix.\"\"\"\n","    fig = plt.figure(1)\n","    fig.clf()\n","    ax = fig.add_subplot(111)\n","\n","    N_images = images.shape[0]\n","    N_rows = onp.int32(onp.ceil(float(N_images) / ims_per_row))\n","    pad_value = vmin\n","    concat_images = onp.full(((digit_dimensions[0] + padding) * N_rows + padding,\n","                             (digit_dimensions[1] + padding) * ims_per_row + padding), pad_value)\n","    for i in range(N_images):\n","        cur_image = np.reshape(images[i, :], digit_dimensions)\n","        row_ix = i // ims_per_row\n","        col_ix = i % ims_per_row\n","        row_start = padding + (padding + digit_dimensions[0]) * row_ix\n","        col_start = padding + (padding + digit_dimensions[1]) * col_ix\n","        concat_images[row_start: row_start + digit_dimensions[0],\n","                      col_start: col_start + digit_dimensions[1]] = cur_image\n","        cax = ax.matshow(concat_images, cmap=cmap, vmin=vmin, vmax=vmax)\n","        plt.xticks(onp.array([]))\n","        plt.yticks(onp.array([]))\n","    \n","    plt.plot()\n","\n","plot_images(train_images[:10, :])"],"metadata":{"id":"_KvgdSxIXSP4","colab":{"base_uri":"https://localhost:8080/","height":178},"executionInfo":{"status":"ok","timestamp":1649283716309,"user_tz":240,"elapsed":2912,"user":{"displayName":"Lisa Yu","userId":"02835623436724771541"}},"outputId":"21773446-d105-45d7-d29e-927715f8b8dd"},"execution_count":11,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{}}]},{"cell_type":"markdown","source":["**2.1) [20 pts]** The model is as follows.\n","\n","\n","*   **Prior:** The prior over each digit's latent representation is a multivariate standard normal distribution. For all questions, we'll set the dimension of the latent space to 2.\n","A larger latent dimension would provide a more powerful model, but for this assignment we'll use a two-dimensional latent space to make visualization and debugging easier.\n","\n","\n","*   **Likelihood:** Given the latent representation $z$ for an image, the distribution over all 784 pixels in the image is given by a product of independent Bernoullis, whose means are given by the output of a neural network $f_\\theta(z)$:\n","$$p(x|z, \\theta) = \\prod_{d=1}^{784} \\operatorname{Ber}(x_d|f_\\theta(z)_d)$$\n","The neural network $f_\\theta$ is called the decoder, and its parameters $\\theta$ will be optimized to fit the data.\n","\n","Implement the missing lines in the below code, to complete\n","the functions:\n","1.   $\\texttt{log_likelihood}$: Log-likelihood of the above model.\n","2.   $\\texttt{log_joint}$: Joint log-likelihood of data and latent variables.\n","3.   $\\texttt{objective}$: You will use the elbo function you wrote in the previous question.\n","\n","Report the final ELBO. "],"metadata":{"id":"CuU3ftS4Fl-5"}},{"cell_type":"code","source":["# Define a specific VAE for MNIST\n","\n","data_dimension = 28*28\n","latent_dimension = 2\n","key = random.PRNGKey(0)\n","\n","# Define the recognition network.\n","# We implement the functions as a split output of a 1-layer MLP\n","# https://github.com/google/jax/blob/master/jax/experimental/README.md#neural-net-building-with-stax\n","init_recognize, recognition_net = serial(\n","    Dense(150),\n","    Relu,\n","    Dense(50),\n","    Relu,\n","    FanOut(2),\n","    parallel(\n","        Dense(latent_dimension),   # Output mean of q(z)\n","        Dense(latent_dimension)    # Output log_std of q(z)\n","        )\n","    )\n","_, init_recognition_params = init_recognize(rng, input_shape=(data_dimension,))  # TODO: What is the input dimension of the encoder?\n","\n","\n","# Define the decoder network.\n","init_decoder, decoder = serial(\n","    Dense(150),\n","    Relu,\n","    Dense(50),\n","    Relu,\n","    Dense(data_dimension),    # TODO: Output logit of Ber(x|z)\n",")\n","_, init_decoder_params = init_decoder(rng, input_shape=(latent_dimension,))      # TODO: What is the input dimension of the decoder?\n","\n","\n","# Set up log likelihood function.\n","def bernoulli_logpdf(logits, x):\n","  \"\"\"Bernoulli log pdf of data x given logits.\"\"\"\n","  return -np.sum(np.logaddexp(0., np.where(x, -1., 1.) * logits))\n","\n","def log_likelihood(decoder_params, latent, datapoint): # TODO\n","  logits = decoder(decoder_params, latent)\n","  return bernoulli_logpdf(logits, datapoint)\n","\n","def log_joint(decoder_params, latent, datapoint): # TODO\n","  return log_prior(latent) + log_likelihood(decoder_params, latent, datapoint)\n","\n","# Run optimization\n","optimizer=optimizers.adam\n","optimizer_kwargs=dict(step_size=1e-2)\n","n_iters = 5000\n","minibatch_size = 200\n","\n","opt_init, opt_update, get_params = optimizer(**optimizer_kwargs)\n","opt_state = opt_init((init_recognition_params, init_decoder_params))\n","\n","def objective(params, t):  # The loss function to be minimized.  \n","  rng = random.PRNGKey(t)\n","  minibatch_ixs = random.choice(rng, train_images.shape[0], (minibatch_size,))\n","  minibatch = train_images[minibatch_ixs, :] # TODO\n","  recognition_params, decoder_params = params # TODO\n","  return -batch_elbo( # TODO \n","    recognition_net,\n","    log_joint,\n","    recognition_params,  # a.k.a. phi\n","    decoder_params,      # a.k.a. theta\n","    minibatch,\n","    rng)\n","  \n","def callback(params, t):\n","  if t % 100 == 0:\n","    print(\"Iteration {} lower bound {}\".format(t, -objective(params, t)))\n","\n","@jit\n","def update(i, opt_state):\n","    params = get_params(opt_state) \n","    gradient = grad(objective)(params, i)\n","    return opt_update(i, gradient, opt_state)\n","\n","# Main loop.\n","print(\"Optimizing variational parameters...\")\n","for t in trange(0, n_iters):\n","    opt_state = update(t, opt_state)\n","    params = get_params(opt_state)\n","    callback(params, t)\n","\n","recognition_params, decoder_params = params"],"metadata":{"id":"enYQZKWebwFy","colab":{"base_uri":"https://localhost:8080/","height":934,"referenced_widgets":["ef0b38118cb44ac49dd2d8442510853c","8558c0fe44514acea8f09344f5c667c3","a51294fca35e4b43b49c9a07667d6615","d9ebcb8c41844770a7ec811d0afcd00d","1ec714c8d88849d28ff2dcd424eaddbf","e91565b79f9e4651bc4bf89d6b3f21bd","bbab5885b10643f895d315401b560d96","f6db64ae55a440aea7af5b188232c2c3","721edf679e1240aa85076d330cc82dc6","650ffe8813c2423e8da69440282f42e1","e30e6fe3b26f434ebb1487e5e38d9f1c"]},"executionInfo":{"status":"ok","timestamp":1649283783066,"user_tz":240,"elapsed":60549,"user":{"displayName":"Lisa Yu","userId":"02835623436724771541"}},"outputId":"21d96054-f9ac-4501-df67-ca72d4dc8629"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["Optimizing variational parameters...\n"]},{"output_type":"display_data","data":{"text/plain":["  0%|          | 0/5000 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"ef0b38118cb44ac49dd2d8442510853c"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Iteration 0 lower bound -524.9828491210938\n","Iteration 100 lower bound -180.47645568847656\n","Iteration 200 lower bound -169.70123291015625\n","Iteration 300 lower bound -162.76475524902344\n","Iteration 400 lower bound -165.68527221679688\n","Iteration 500 lower bound -157.0092010498047\n","Iteration 600 lower bound -151.02748107910156\n","Iteration 700 lower bound -156.9091796875\n","Iteration 800 lower bound -150.623046875\n","Iteration 900 lower bound -151.49261474609375\n","Iteration 1000 lower bound -153.4732208251953\n","Iteration 1100 lower bound -152.65196228027344\n","Iteration 1200 lower bound -149.03884887695312\n","Iteration 1300 lower bound -150.69020080566406\n","Iteration 1400 lower bound -149.90489196777344\n","Iteration 1500 lower bound -151.2306365966797\n","Iteration 1600 lower bound -151.78085327148438\n","Iteration 1700 lower bound -152.15139770507812\n","Iteration 1800 lower bound -149.27825927734375\n","Iteration 1900 lower bound -149.61790466308594\n","Iteration 2000 lower bound -151.7099609375\n","Iteration 2100 lower bound -145.91526794433594\n","Iteration 2200 lower bound -146.5099639892578\n","Iteration 2300 lower bound -149.84146118164062\n","Iteration 2400 lower bound -143.38929748535156\n","Iteration 2500 lower bound -140.84945678710938\n","Iteration 2600 lower bound -148.28558349609375\n","Iteration 2700 lower bound -148.75570678710938\n","Iteration 2800 lower bound -152.42689514160156\n","Iteration 2900 lower bound -142.3258056640625\n","Iteration 3000 lower bound -148.7921600341797\n","Iteration 3100 lower bound -136.32786560058594\n","Iteration 3200 lower bound -142.6756134033203\n","Iteration 3300 lower bound -140.4719696044922\n","Iteration 3400 lower bound -151.53765869140625\n","Iteration 3500 lower bound -144.4987335205078\n","Iteration 3600 lower bound -145.20376586914062\n","Iteration 3700 lower bound -143.7354278564453\n","Iteration 3800 lower bound -146.37294006347656\n","Iteration 3900 lower bound -141.13059997558594\n","Iteration 4000 lower bound -152.30979919433594\n","Iteration 4100 lower bound -141.32159423828125\n","Iteration 4200 lower bound -149.59979248046875\n","Iteration 4300 lower bound -138.01739501953125\n","Iteration 4400 lower bound -143.841552734375\n","Iteration 4500 lower bound -151.07431030273438\n","Iteration 4600 lower bound -143.9822998046875\n","Iteration 4700 lower bound -143.50894165039062\n","Iteration 4800 lower bound -151.18612670898438\n","Iteration 4900 lower bound -147.51712036132812\n"]}]},{"cell_type":"code","source":["print(-objective(params, n_iters)) # final ELBO"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2TKW3DmXeuUh","executionInfo":{"status":"ok","timestamp":1649283786523,"user_tz":240,"elapsed":332,"user":{"displayName":"Lisa Yu","userId":"02835623436724771541"}},"outputId":"ad8d0af2-d4ca-4ff7-88f9-162a0b28ab59"},"execution_count":13,"outputs":[{"output_type":"stream","name":"stdout","text":["-144.56392\n"]}]},{"cell_type":"markdown","source":["**2.2) [5pts]** In what follows, we will investigate our model by visualizing the distribution over data given by the generative model, sampling from it, and interpolating between digits.\n","\n","One way to understand the meaning of latent representations is to see which parts of the latent space correspond to which kinds of data. Here we'll produce a scatter plot in the latent space, where each point in the plot represents a different image in the training set.\n","\n","Implement the missing lines in the below code, to plot the transformed data points in the latent space.\n","\n","\n","\n","1.   Encode each image in the training set.\n","2.   Take the 2D mean vector of each encoding $q_\\phi(z|x)$.\n","3.   Plot these mean vectors in the 2D latent space with a scatterplot.\n","4.   Colour each point according to the class label (0 to 9).\n","\n","\n","Hopefully our latent space will group images of different classes, even though we never provided class labels to the model!\n","\n","\n","\n"],"metadata":{"id":"_4D_ldpaGldW"}},{"cell_type":"code","source":["for k in range(10):\n","  cur_data = train_images[train_labels[:, k] == True, :]\n","  transformed = recognition_net(recognition_params, cur_data)[0] # TODO:  Call recognition net and extract mean\n","  plt.scatter(transformed[:, 0], transformed[:, 1], s=2, label=str(k+1))\n","\n","plt.legend()\n","plt.axis(\"equal\")"],"metadata":{"id":"MReco_Jje8LE","colab":{"base_uri":"https://localhost:8080/","height":337},"executionInfo":{"status":"ok","timestamp":1649283805085,"user_tz":240,"elapsed":12101,"user":{"displayName":"Lisa Yu","userId":"02835623436724771541"}},"outputId":"93c16e79-150d-4c94-dd0d-e0e6255feb22"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(-3.9391932487487793,\n"," 3.3436636924743652,\n"," -6.463786101341247,\n"," 4.059707140922546)"]},"metadata":{},"execution_count":14},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["2.3) [10 pts] Now we'll fit a model with a larger latent space.  We won't be able to visualize this model as easily, but it should be able to fit the data better.  Set latent_dimension to 20 and re-fit the model.  You should be able to get a much better ELBO using this larger model."],"metadata":{"id":"omqkiyxKRfRU"}},{"cell_type":"code","source":["# TODO: Train the same model as above but with\n","# Feel free to copy code from above.\n","\n","data_dimension = 28*28\n","latent_dimension = 20\n","key = random.PRNGKey(0)\n","\n","# Define the recognition network.\n","# We implement the functions as a split output of a 1-layer MLP\n","# https://github.com/google/jax/blob/master/jax/experimental/README.md#neural-net-building-with-stax\n","init_recognize, recognition_net = serial(\n","    Dense(150),\n","    Relu,\n","    Dense(50),\n","    Relu,\n","    FanOut(2),\n","    parallel(\n","        Dense(latent_dimension),   # Output mean of q(z)\n","        Dense(latent_dimension)    # Output log_std of q(z)\n","        )\n","    )\n","_, init_recognition_params = init_recognize(rng, input_shape=(data_dimension,))  # TODO: What is the input dimension of the encoder?\n","\n","\n","# Define the decoder network.\n","init_decoder, decoder = serial(\n","    Dense(150),\n","    Relu,\n","    Dense(50),\n","    Relu,\n","    Dense(data_dimension),    # TODO: Output logit of Ber(x|z)\n",")\n","_, init_decoder_params = init_decoder(rng, input_shape=(latent_dimension,))      # TODO: What is the input dimension of the decoder?\n","\n","\n","# Set up log likelihood function.\n","def bernoulli_logpdf(logits, x):\n","  \"\"\"Bernoulli log pdf of data x given logits.\"\"\"\n","  return -np.sum(np.logaddexp(0., np.where(x, -1., 1.) * logits))\n","\n","def log_likelihood(decoder_params, latent, datapoint): # TODO\n","  logits = decoder(decoder_params, latent)\n","  return bernoulli_logpdf(logits, datapoint)\n","\n","def log_joint(decoder_params, latent, datapoint): # TODO\n","  return log_prior(latent) + log_likelihood(decoder_params, latent, datapoint)\n","\n","# Run optimization\n","optimizer=optimizers.adam\n","optimizer_kwargs=dict(step_size=1e-2)\n","n_iters = 5000\n","minibatch_size = 200\n","\n","opt_init, opt_update, get_params = optimizer(**optimizer_kwargs)\n","opt_state = opt_init((init_recognition_params, init_decoder_params))\n","\n","def objective(params, t):  # The loss function to be minimized.  \n","  rng = random.PRNGKey(t)\n","  minibatch_ixs = random.choice(rng, train_images.shape[0], (minibatch_size,))\n","  minibatch = train_images[minibatch_ixs, :] # TODO\n","  recognition_params, decoder_params = params # TODO\n","  return -batch_elbo( # TODO \n","    recognition_net,\n","    log_joint,\n","    recognition_params,  # a.k.a. phi\n","    decoder_params,      # a.k.a. theta\n","    minibatch,\n","    rng)\n","  \n","def callback(params, t):\n","  if t % 100 == 0:\n","    print(\"Iteration {} lower bound {}\".format(t, -objective(params, t)))\n","\n","@jit\n","def update(i, opt_state):\n","    params = get_params(opt_state) \n","    gradient = grad(objective)(params, i)\n","    return opt_update(i, gradient, opt_state)\n","\n","# Main loop.\n","print(\"Optimizing variational parameters...\")\n","for t in trange(0, n_iters):\n","    opt_state = update(t, opt_state)\n","    params = get_params(opt_state)\n","    callback(params, t)\n","\n","recognition_params, decoder_params = params\n","# ==========================================\n","\n","\n"],"metadata":{"id":"bydpfpEjRnUL","colab":{"base_uri":"https://localhost:8080/","height":934,"referenced_widgets":["5d97e84c20f849df92d08c1f6af00e2c","0a5b23a032294109bbb037d89f3ce5cc","d30feccb12134aad9f8ab904dfed1f06","b6b6272a805349398285f9d9c939d3ed","efa148a9393e45bba0c741903c19db87","0489c568ce1f407bad29f6810220571a","3f7dde58d297459e94eff68ac4639f87","b3bcac53a72349bf89ae71e72625033c","a38c3e9d61f441ab9fac6a0ee21af25f","5b1ea6bd72a7401fb8e87db67eef1791","6ce154f180f5431cb498ee6cb68f0da1"]},"executionInfo":{"status":"ok","timestamp":1649283879374,"user_tz":240,"elapsed":64772,"user":{"displayName":"Lisa Yu","userId":"02835623436724771541"}},"outputId":"0a794726-b616-44dd-a6d1-6406a6fee7a3"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["Optimizing variational parameters...\n"]},{"output_type":"display_data","data":{"text/plain":["  0%|          | 0/5000 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"5d97e84c20f849df92d08c1f6af00e2c"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Iteration 0 lower bound -527.3514404296875\n","Iteration 100 lower bound -187.71473693847656\n","Iteration 200 lower bound -172.8032989501953\n","Iteration 300 lower bound -154.9191131591797\n","Iteration 400 lower bound -152.0480194091797\n","Iteration 500 lower bound -144.30670166015625\n","Iteration 600 lower bound -139.08685302734375\n","Iteration 700 lower bound -141.570556640625\n","Iteration 800 lower bound -134.04736328125\n","Iteration 900 lower bound -130.72854614257812\n","Iteration 1000 lower bound -134.20681762695312\n","Iteration 1100 lower bound -133.75245666503906\n","Iteration 1200 lower bound -130.17559814453125\n","Iteration 1300 lower bound -132.40609741210938\n","Iteration 1400 lower bound -129.75186157226562\n","Iteration 1500 lower bound -128.92996215820312\n","Iteration 1600 lower bound -130.63845825195312\n","Iteration 1700 lower bound -133.4053497314453\n","Iteration 1800 lower bound -130.03375244140625\n","Iteration 1900 lower bound -129.3917694091797\n","Iteration 2000 lower bound -132.24729919433594\n","Iteration 2100 lower bound -124.3398208618164\n","Iteration 2200 lower bound -129.05645751953125\n","Iteration 2300 lower bound -131.93777465820312\n","Iteration 2400 lower bound -125.37993621826172\n","Iteration 2500 lower bound -120.29181671142578\n","Iteration 2600 lower bound -128.47418212890625\n","Iteration 2700 lower bound -125.82511138916016\n","Iteration 2800 lower bound -128.1325225830078\n","Iteration 2900 lower bound -126.37964630126953\n","Iteration 3000 lower bound -129.07591247558594\n","Iteration 3100 lower bound -119.94364929199219\n","Iteration 3200 lower bound -124.24540710449219\n","Iteration 3300 lower bound -123.4174575805664\n","Iteration 3400 lower bound -131.00755310058594\n","Iteration 3500 lower bound -125.35309600830078\n","Iteration 3600 lower bound -126.68896484375\n","Iteration 3700 lower bound -122.9002685546875\n","Iteration 3800 lower bound -122.23692321777344\n","Iteration 3900 lower bound -122.68394470214844\n","Iteration 4000 lower bound -133.38760375976562\n","Iteration 4100 lower bound -121.30189514160156\n","Iteration 4200 lower bound -131.24386596679688\n","Iteration 4300 lower bound -121.74867248535156\n","Iteration 4400 lower bound -125.35775756835938\n","Iteration 4500 lower bound -133.87161254882812\n","Iteration 4600 lower bound -125.54159545898438\n","Iteration 4700 lower bound -122.05136108398438\n","Iteration 4800 lower bound -130.81471252441406\n","Iteration 4900 lower bound -124.64391326904297\n"]}]},{"cell_type":"code","source":["print(-objective(params, n_iters)) # final ELBO"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gBEPeUmUMi6R","executionInfo":{"status":"ok","timestamp":1649283973630,"user_tz":240,"elapsed":296,"user":{"displayName":"Lisa Yu","userId":"02835623436724771541"}},"outputId":"fb6b9f7d-072e-4d4c-9928-33e020dca27b"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["-126.90322\n"]}]},{"cell_type":"markdown","source":["**2.4) [5pts]** Implement the missing lines in the below code, to plot the transformed data points in the latent space.\n","\n","You will be using ancestral sampling:\t\n","\n","1.   First sample a z from the prior.\n","2.   Use the generative model to compute the bernoulli means over the pixels of $x$ given $z$. \n","3.   Plot these means (parameters) as a greyscale image.\n","\n","Do this for 25 samples z from the prior."],"metadata":{"id":"Dk0GjGNOHEXc"}},{"cell_type":"code","source":["# Sample data from the trained generative model to see if it\n","# roughly matches the data.\n","\n","def sigmoid(x):\n","  # Maps logits to probabilities.\n","  return 0.5 * (np.tanh(x) + 1.0)\n","\n","recognition_params, decoder_params = params\n","\n","sampled_zs = diag_gaussian_sample(rng, np.zeros((25, latent_dimension)), np.zeros((25, latent_dimension)))  # TODO: Sample from prior on z.\n","vdecoder = vmap(decoder, in_axes=(None, 0))\n","bernoulli_means = sigmoid(decoder(decoder_params, sampled_zs)) # TODO: Call decoder, and map logits to probabilities.\n","plot_images(bernoulli_means)"],"metadata":{"id":"mYkNjM1Ufq9s","colab":{"base_uri":"https://localhost:8080/","height":255},"executionInfo":{"status":"ok","timestamp":1649283979970,"user_tz":240,"elapsed":4318,"user":{"displayName":"Lisa Yu","userId":"02835623436724771541"}},"outputId":"47e1aab2-513e-4159-cade-dfd069813094"},"execution_count":17,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["**2.5) [5pts]** Another way to examine a latent variable model with continuous latent variables is to interpolate between the latent representations of two points. Here we will encode 3 pairs of data points with different classes. Then we will linearly interpolate between the mean vectors of their encodings. We will plot the generative distributions along the linear interpolation.\n","\n","\n","1.   First, write a function which takes two points $z_a$ and $z_b$, and a value $\\alpha \\in [0,1]$, and outputs the linear interpolation $z_\\alpha = \\alpha z_a + (1-\\alpha)z_b$.\n","2.  Sample 3 pairs of images, each having a different class.\n","3.  Encode the data in each pair, and take the mean vectors\n","4.  Linearly interpolate between these mean vectors\n","5.  At 10 equally-space points along the interpolation, plot the Bernoulli means $p(x|z_\\alpha)$.\n","6.  Concatenate these plots into one figure."],"metadata":{"id":"T_TLbol-Yrb2"}},{"cell_type":"code","source":["def plot_interp(ix1, ix2):\n","  left_z = recognition_net(recognition_params, train_images[ix1, :])[0]\n","  right_z = recognition_net(recognition_params, train_images[ix2, :])[0]\n","  interp_weights = list(np.linspace(0.0, 1.0, 10))\n","  interp_zs = np.array([a * left_z + (1 - a) * right_z for a in interp_weights])  # TODO: Linearly interpolate between left_z and right_z.  Feel free to use a for loop.\n","  bernoulli_means = sigmoid(decoder(decoder_params, interp_zs))\n","  plot_images(bernoulli_means)"],"metadata":{"id":"1Wt6FylTfygq","executionInfo":{"status":"ok","timestamp":1649283994652,"user_tz":240,"elapsed":600,"user":{"displayName":"Lisa Yu","userId":"02835623436724771541"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["plot_interp(3, 11)"],"metadata":{"id":"VwbJ00RLQ1aB","colab":{"base_uri":"https://localhost:8080/","height":178},"executionInfo":{"status":"ok","timestamp":1649283999382,"user_tz":240,"elapsed":2646,"user":{"displayName":"Lisa Yu","userId":"02835623436724771541"}},"outputId":"6899e137-786a-49ad-fdeb-8e231a652925"},"execution_count":19,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{}}]},{"cell_type":"code","source":["plot_interp(11, 22)"],"metadata":{"id":"i7IrTnLbQ3oD","colab":{"base_uri":"https://localhost:8080/","height":178},"executionInfo":{"status":"ok","timestamp":1649284002519,"user_tz":240,"elapsed":851,"user":{"displayName":"Lisa Yu","userId":"02835623436724771541"}},"outputId":"bdc2d0b0-27e7-457f-fb40-771caa876267"},"execution_count":20,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["plot_interp(32, 334)"],"metadata":{"id":"m2R_U7-9Q46R","colab":{"base_uri":"https://localhost:8080/","height":178},"executionInfo":{"status":"ok","timestamp":1649284006665,"user_tz":240,"elapsed":896,"user":{"displayName":"Lisa Yu","userId":"02835623436724771541"}},"outputId":"d362b507-ac93-4e8a-f2f6-b751c0bcece4"},"execution_count":21,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# Question 3: Predicting the Bottom of Images given the Top [15 points]\n","\n","Now we'll use the trained generative model to perform inference for $p(z|\\text{top half of image x})$.\n","Unfortunately, we can't re-use our recognition network, since it can only input entire images.\n","However, we can still do approximate inference without the encoder.\n","\n","To illustrate this, we'll approximately infer the distribution over the pixels in the bottom half an image conditioned on the top half of the image:\n","$$p(\\text{bottom half of image x} | \\text{top half of image x}) = \\int p(\\text{bottom half of image x} | z) p( z | \\text{top half of image x}) dz$$\n","To approximate the posterior $p( z | \\text{top half of image x})$, we'll use stochastic variational inference.\n","\n","To implement SVI again, feel free to either use your ELBO as defined above, with a recognition network that doesn't use the datapoint, or re-use your SVI code from previous assignments.\n","\n","\n","[5 points] Write a function that computes $p(z, \\text{top half of image x})$\n","\t\n","* First, we provided a function which returns only the top half of an array. This will be useful for plotting, as well as selecting the correct Bernoulli parameters.\n","* Write a function that computes $\\log p(\\text{top half of image x} | z)$. Hint: Given $z$, the likelihood factorizes, and all the unobserved dimensions of $x$ are leaf nodes, so can be integrated out exactly.\n","* Combine this likelihood with the prior to get a function that takes an x and an array of $z$s, and computes $p(z, \\text{top half of image x})$ for each $z$ in the array.\n","\n","\n","Now, to approximate $p(z | \\text{top half of image x})$ in a scalable way, we'll use stochastic variational inference.  For 4 digits of your choosing from the training set:\n","\n","Now, to approximate $p(z | \\text{top half of image x})$ in a scalable way, we'll use stochastic variational inference.  For a digit of your choosing from the training set:\n","\n","* Initialize variational parameters $\\phi_\\mu$ and $\\phi_{\\log \\sigma}$ for a variational distribution $q_\\phi(z|\\text{top half of $x$})$.\n","* Write a function that computes estimates the ELBO over $K$ samples $z \\sim q_\\phi(z|\\text{top half of $x$})$.\n","Use $\\log p(z)$, $\\log p(\\text{top half of $x$} | z)$, and $\\log q_\\phi(z|\\text{top half of $x$})$.\n","* Optimize $\\phi_\\mu$ and $\\phi_{\\log \\sigma}$ to maximize the ELBO.\n","* On a single plot, show the isocontours of the joint distribution $p(z, \\text{top half of image x})$, and the optimized approximate posterior $q_\\phi(z | \\text{top half of image x})$.\n","* Finally, take a sample $z$ from your approximate posterior, and feed it to the decoder to find the Bernoulli means of $p( \\text{bottom half of image x}|z)$.  Contatenate this greyscale image to the true top of the image.\n","Plot the original whole image beside it for comparison.\n"],"metadata":{"id":"URnkdY_KQxdT"}},{"cell_type":"code","source":["def firsthalf(x):\n","  D = np.shape(x)[-1]\n","  return x[:(D // 2)]\n","\n","def secondhalf(x):\n","  D = np.shape(x)[-1]\n","  return x[(D // 2):]\n","\n","# Set up optimizer.\n","stepsize = 0.0001\n","num_samples_per_iter = 50\n","\n","def infer_bottom_half(ix):\n","  datapoint = train_images[ix, :]\n","\n","  def log_likelihood_half(latent):\n","    logits = decoder(decoder_params, latent)\n","    return bernoulli_logpdf(firsthalf(logits), firsthalf(datapoint)) # TODO: Compute log probability of p(first half of image | z)\n","\n","  def log_joint_half(latent):\n","    return log_prior(latent) + log_likelihood_half(latent) # TODO: Compute log probability of p(first half of image, z)\n","\n","  def svi_elbo(logprob, rng, mean, log_std):\n","    # Single-sample Monte Carlo estimate of the variational lower bound.\n","    sample = diag_gaussian_sample(rng, mean, log_std)\n","    return logprob(sample) - diag_gaussian_logpdf(sample, mean, log_std)\n","\n","  def batch_svi_elbo(logprob, rng, params, num_samples):\n","    # Average over a batch of random samples. Use the vmap function for this part.\n","    rngs = random.split(rng, num_samples)\n","    vectorized_elbo = vmap(partial(svi_elbo, logprob), in_axes=(0, None, None))\n","    return np.mean(vectorized_elbo(rngs, *params))\n","\n","  init_mean = np.zeros((latent_dimension,)) # TODO: How many variational parameters do you need for a single z?\n","  init_std  = np.zeros((latent_dimension,)) # TODO: How many variational parameters do you need for a single z? NOT SURE init_lof_std?\n","  init_params = (init_mean, init_std)\n","  opt_init, opt_update, get_params = optimizers.momentum(step_size=stepsize, mass=0.9)\n","  opt_state = opt_init(init_params)\n","\n","  def objective(params, t):\n","    # The loss function to be minimized.\n","    rng = random.PRNGKey(t)\n","    return -batch_svi_elbo(log_joint_half, rng, params, num_samples_per_iter) # TODO:  What objective are you optimizing?\n","\n","  @jit\n","  def update(i, opt_state):\n","      svi_params = get_params(opt_state) \n","      gradient = grad(objective)(svi_params, i)\n","      return opt_update(i, gradient, opt_state)\n","\n","  # Main loop.\n","  print(\"Optimizing variational parameters...\")\n","  for t in trange(0, 100):\n","      opt_state = update(t, opt_state)\n","      svi_params = get_params(opt_state)\n","\n","  (svi_mean, adsf) = svi_params\n","\n","  # Plotting code.\n","  tophalf = np.concatenate([firsthalf(datapoint), 0.*firsthalf(datapoint)])\n","  decoded = sigmoid(decoder(decoder_params, svi_mean))\n","  combined = np.concatenate([firsthalf(datapoint), secondhalf(decoded)])\n","  all = np.stack([datapoint, tophalf, decoded, combined], axis=1)\n","  plot_images(all.T)"],"metadata":{"id":"y3LHJ8WJQzJB","executionInfo":{"status":"ok","timestamp":1649284014213,"user_tz":240,"elapsed":529,"user":{"displayName":"Lisa Yu","userId":"02835623436724771541"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["infer_bottom_half(0)"],"metadata":{"id":"Cxno2UOLS3Ar","colab":{"base_uri":"https://localhost:8080/","height":162,"referenced_widgets":["d0573a7640d94b6a9c58ead35bd7533c","0dbbf331072d4190bd4305b62d53c350","724312ed977b44b9bbe48feef592c145","4d80a260d0e149e18c19f21c6576ca60","b42aa74146604fd69a9dea5f394dd36c","613eb58ac175433e813d0158bdf98b8f","6f6b5b5363714cffa64fb2e924ed87e2","2a272bf092914bf8b7b2b738aaad4b06","23603d577412402fbd4ddaba6224cf4c","e405babd70974edf83a2510883f363af","4e3b0ece535448758926c06061429ac5"]},"executionInfo":{"status":"ok","timestamp":1649284019537,"user_tz":240,"elapsed":2618,"user":{"displayName":"Lisa Yu","userId":"02835623436724771541"}},"outputId":"a06f3aaa-c9d4-4ed4-ad5c-f4ccd5666643"},"execution_count":23,"outputs":[{"output_type":"stream","name":"stdout","text":["Optimizing variational parameters...\n"]},{"output_type":"display_data","data":{"text/plain":["  0%|          | 0/100 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"d0573a7640d94b6a9c58ead35bd7533c"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{}}]},{"cell_type":"code","source":["infer_bottom_half(1)"],"metadata":{"id":"DCQJlkeiTfoD","colab":{"base_uri":"https://localhost:8080/","height":162,"referenced_widgets":["b465c6b7e29447af93f269dfea026322","f3bea710cd94449baaee82feab67def0","3f040981e83948d58f5a09ec51757b22","244d51dd27f54e9f9960da3953c185fc","77aacb0d5f7743f5b9ad75fdbbe3da79","96ccbac7068240abad12e34c5c613826","427b2752ed234c6cab24ffad1c4276e2","348a8d59f14841908ce2bb2c4a4a4165","aeac106b1e8a4387bcadbe9f94f2a56d","623b35383de04df7bd6c356dae07185f","f7665bcded254821aa85fa6aacd529bf"]},"executionInfo":{"status":"ok","timestamp":1649284020762,"user_tz":240,"elapsed":1238,"user":{"displayName":"Lisa Yu","userId":"02835623436724771541"}},"outputId":"4d939bd9-ee10-4a7d-c0ad-c38b87819f16"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["Optimizing variational parameters...\n"]},{"output_type":"display_data","data":{"text/plain":["  0%|          | 0/100 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"b465c6b7e29447af93f269dfea026322"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{}}]},{"cell_type":"code","source":["infer_bottom_half(3)"],"metadata":{"id":"Vwvs3V3aTivw","colab":{"base_uri":"https://localhost:8080/","height":162,"referenced_widgets":["3eb4d85fcc0149819634ea6982a93182","b8ea08e1fbd74fb196657f0b317879db","9f94312d2ca44e7eb37c3f3872fa91ca","1a5ca15ce7a2429db0b3bb957baf3682","188f414573594cc1bfb7377d97c09f5a","18b167c4d06549ba95c54c57e6b3eb15","23156773e365404c91b111dccbb04fa7","1bbc8f1ed8e549b7b70827860ebb2461","5440e1f8b0864cca93ccccb0e016f703","9fe83f6ebbb64622a15ce12c4469756a","f37b23f639b34903a1ba75012b363290"]},"executionInfo":{"status":"ok","timestamp":1649284026222,"user_tz":240,"elapsed":1052,"user":{"displayName":"Lisa Yu","userId":"02835623436724771541"}},"outputId":"94c8e0b0-3e23-467d-ffd0-50b3f1bfabc6"},"execution_count":25,"outputs":[{"output_type":"stream","name":"stdout","text":["Optimizing variational parameters...\n"]},{"output_type":"display_data","data":{"text/plain":["  0%|          | 0/100 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"3eb4d85fcc0149819634ea6982a93182"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{}}]},{"cell_type":"code","source":["infer_bottom_half(110)"],"metadata":{"id":"kzpO8wVhTltK","colab":{"base_uri":"https://localhost:8080/","height":162,"referenced_widgets":["f605c283c5d24928a6283d2305b71d29","6d4f49480eb246bcbffd74f9a8cd5fbb","b19d0be2135f4a6f900f0405da3a4682","0e192c74a52147c984db25b337c87589","953137058c2946f9a70688f57944df51","3a88d7e3f0294753b310dea06146864e","d1053b0fc085494fa515c25b8c4e31f0","aa007f9e14154e58a78bbcfe128781d0","0cf7934e8f004ef6adc8923df79cf918","5180ed29afca47b3a99213b43980e58a","bd8805847a6d4c699c37d42c91a06d6b"]},"executionInfo":{"status":"ok","timestamp":1649284030223,"user_tz":240,"elapsed":1420,"user":{"displayName":"Lisa Yu","userId":"02835623436724771541"}},"outputId":"36375bba-6df7-4e08-89e6-0cf8773ed9fa"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["Optimizing variational parameters...\n"]},{"output_type":"display_data","data":{"text/plain":["  0%|          | 0/100 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"f605c283c5d24928a6283d2305b71d29"}},"metadata":{}},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"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\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# Q4 [10 points] Improving the model.\n","\n","Copy code from question 2.3 or any others above that you'd like.  Try making 3 different changes to the model, recognition network, or optimization setup and report the improvement in ELBO you get for each one.\n"],"metadata":{"id":"nS8E9oy5TkQH"}},{"cell_type":"code","source":["# Leave a comment at the top of your code listing three changes and the improvement it made to the ELBO:\n","# Baseline model from 2.3: ELBO = -126.90322\n","# Change 1: changed latent_dim from 20 to 10. ELBO changed to -115.78695\n","# Change 2: changed the two dense layers in both the encoder and decoder to 256 and 128 wide. ELBO changed to -112.677284\n","# Change 3: changed learning rate from 1e-2 to 1e-3. ELBO changed to -99.54614\n"],"metadata":{"id":"Ycb3QaILTlkK","executionInfo":{"status":"ok","timestamp":1649284101264,"user_tz":240,"elapsed":375,"user":{"displayName":"Lisa Yu","userId":"02835623436724771541"}}},"execution_count":27,"outputs":[]},{"cell_type":"code","source":["# Change 1: changed latent_dim from 20 to 10\n","\n","data_dimension = 28*28\n","latent_dimension = 10\n","key = random.PRNGKey(0)\n","\n","# Define the recognition network.\n","# We implement the functions as a split output of a 1-layer MLP\n","# https://github.com/google/jax/blob/master/jax/experimental/README.md#neural-net-building-with-stax\n","init_recognize, recognition_net = serial(\n","    Dense(150),\n","    Relu,\n","    Dense(50),\n","    Relu,\n","    FanOut(2),\n","    parallel(\n","        Dense(latent_dimension),   # Output mean of q(z)\n","        Dense(latent_dimension)    # Output log_std of q(z)\n","        )\n","    )\n","_, init_recognition_params = init_recognize(rng, input_shape=(data_dimension,))  # TODO: What is the input dimension of the encoder?\n","\n","\n","# Define the decoder network.\n","init_decoder, decoder = serial(\n","    Dense(150),\n","    Relu,\n","    Dense(50),\n","    Relu,\n","    Dense(data_dimension),    # TODO: Output logit of Ber(x|z)\n",")\n","_, init_decoder_params = init_decoder(rng, input_shape=(latent_dimension,))      # TODO: What is the input dimension of the decoder?\n","\n","\n","# Set up log likelihood function.\n","def bernoulli_logpdf(logits, x):\n","  \"\"\"Bernoulli log pdf of data x given logits.\"\"\"\n","  return -np.sum(np.logaddexp(0., np.where(x, -1., 1.) * logits))\n","\n","def log_likelihood(decoder_params, latent, datapoint): # TODO\n","  logits = decoder(decoder_params, latent)\n","  return bernoulli_logpdf(logits, datapoint)\n","\n","def log_joint(decoder_params, latent, datapoint): # TODO\n","  return log_prior(latent) + log_likelihood(decoder_params, latent, datapoint)\n","\n","# Run optimization\n","optimizer=optimizers.adam\n","optimizer_kwargs=dict(step_size=1e-2)\n","n_iters = 5000\n","minibatch_size = 200\n","\n","opt_init, opt_update, get_params = optimizer(**optimizer_kwargs)\n","opt_state = opt_init((init_recognition_params, init_decoder_params))\n","\n","def objective(params, t):  # The loss function to be minimized.  \n","  rng = random.PRNGKey(t)\n","  minibatch_ixs = random.choice(rng, train_images.shape[0], (minibatch_size,))\n","  minibatch = train_images[minibatch_ixs, :] # TODO\n","  recognition_params, decoder_params = params # TODO\n","  return -batch_elbo( # TODO \n","    recognition_net,\n","    log_joint,\n","    recognition_params,  # a.k.a. phi\n","    decoder_params,      # a.k.a. theta\n","    minibatch,\n","    rng)\n","  \n","def callback(params, t):\n","  if t % 100 == 0:\n","    print(\"Iteration {} lower bound {}\".format(t, -objective(params, t)))\n","\n","@jit\n","def update(i, opt_state):\n","    params = get_params(opt_state) \n","    gradient = grad(objective)(params, i)\n","    return opt_update(i, gradient, opt_state)\n","\n","# Main loop.\n","print(\"Optimizing variational parameters...\")\n","for t in trange(0, n_iters):\n","    opt_state = update(t, opt_state)\n","    params = get_params(opt_state)\n","    callback(params, t)\n","\n","recognition_params, decoder_params = params\n","# ==========================================\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":934,"referenced_widgets":["62befcf8196943bd88e3fdf207a0a999","5eb5770ee3a44c0080419fa32ce1bc18","619e8e218fab4d4c8252ffa8af160f7b","3ed65cb75f604032be07e3293cd47fe6","a973ebd288634bd3a470e29517ea51fb","feb36638dc7e4cc599362db7b2945e23","bbbb9735594c4cf1bfd8305d5ca4a619","2229373c0ce84d44b05e86275ff9327c","1e1dad63e0c14e47b0e9b720a4087b11","542f78af25d44c209b4e63a5f2cb3753","abc20f9bae0b480c969602ccf345ff75"]},"id":"cjZ5DkTeKmXt","executionInfo":{"status":"ok","timestamp":1649284158618,"user_tz":240,"elapsed":56302,"user":{"displayName":"Lisa Yu","userId":"02835623436724771541"}},"outputId":"b3385504-f10b-47a7-8461-513688e1e768"},"execution_count":28,"outputs":[{"output_type":"stream","name":"stdout","text":["Optimizing variational parameters...\n"]},{"output_type":"display_data","data":{"text/plain":["  0%|          | 0/5000 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"62befcf8196943bd88e3fdf207a0a999"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Iteration 0 lower bound -528.8753662109375\n","Iteration 100 lower bound -196.99612426757812\n","Iteration 200 lower bound -171.11956787109375\n","Iteration 300 lower bound -142.73660278320312\n","Iteration 400 lower bound -136.2654571533203\n","Iteration 500 lower bound -128.0922088623047\n","Iteration 600 lower bound -121.69937133789062\n","Iteration 700 lower bound -126.98681640625\n","Iteration 800 lower bound -123.78268432617188\n","Iteration 900 lower bound -119.92558288574219\n","Iteration 1000 lower bound -123.78384399414062\n","Iteration 1100 lower bound -123.79439544677734\n","Iteration 1200 lower bound -118.7714614868164\n","Iteration 1300 lower bound -120.6698226928711\n","Iteration 1400 lower bound -117.06649780273438\n","Iteration 1500 lower bound -118.90071868896484\n","Iteration 1600 lower bound -118.78755950927734\n","Iteration 1700 lower bound -120.61505889892578\n","Iteration 1800 lower bound -119.47300720214844\n","Iteration 1900 lower bound -117.09957885742188\n","Iteration 2000 lower bound -120.48758697509766\n","Iteration 2100 lower bound -115.49331665039062\n","Iteration 2200 lower bound -118.01190948486328\n","Iteration 2300 lower bound -120.62619018554688\n","Iteration 2400 lower bound -113.67334747314453\n","Iteration 2500 lower bound -110.21774291992188\n","Iteration 2600 lower bound -118.1190185546875\n","Iteration 2700 lower bound -114.76554107666016\n","Iteration 2800 lower bound -118.04225158691406\n","Iteration 2900 lower bound -113.63507843017578\n","Iteration 3000 lower bound -116.51775360107422\n","Iteration 3100 lower bound -108.6517333984375\n","Iteration 3200 lower bound -113.9532699584961\n","Iteration 3300 lower bound -111.15829467773438\n","Iteration 3400 lower bound -120.09237670898438\n","Iteration 3500 lower bound -114.08106994628906\n","Iteration 3600 lower bound -115.41526794433594\n","Iteration 3700 lower bound -110.38607788085938\n","Iteration 3800 lower bound -110.81292724609375\n","Iteration 3900 lower bound -112.95044708251953\n","Iteration 4000 lower bound -123.94789123535156\n","Iteration 4100 lower bound -110.90035247802734\n","Iteration 4200 lower bound -118.56687927246094\n","Iteration 4300 lower bound -112.79996490478516\n","Iteration 4400 lower bound -114.71739196777344\n","Iteration 4500 lower bound -120.87791442871094\n","Iteration 4600 lower bound -114.09320068359375\n","Iteration 4700 lower bound -112.48118591308594\n","Iteration 4800 lower bound -118.75008392333984\n","Iteration 4900 lower bound -113.16960906982422\n"]}]},{"cell_type":"code","source":["print(-objective(params, n_iters))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"5w29X5nbMKh2","executionInfo":{"status":"ok","timestamp":1649284163047,"user_tz":240,"elapsed":314,"user":{"displayName":"Lisa Yu","userId":"02835623436724771541"}},"outputId":"56f4bc0a-a034-4dcb-e15f-af602611605b"},"execution_count":29,"outputs":[{"output_type":"stream","name":"stdout","text":["-115.78695\n"]}]},{"cell_type":"code","source":["# Change 2: changed the two dense layers in both the encoder and decoder to 256 and 128 wide\n","\n","data_dimension = 28*28\n","latent_dimension = 20\n","key = random.PRNGKey(0)\n","\n","# Define the recognition network.\n","# We implement the functions as a split output of a 1-layer MLP\n","# https://github.com/google/jax/blob/master/jax/experimental/README.md#neural-net-building-with-stax\n","init_recognize, recognition_net = serial(\n","    Dense(256),\n","    Relu,\n","    Dense(128),\n","    Relu,\n","    FanOut(2),\n","    parallel(\n","        Dense(latent_dimension),   # Output mean of q(z)\n","        Dense(latent_dimension)    # Output log_std of q(z)\n","        )\n","    )\n","_, init_recognition_params = init_recognize(rng, input_shape=(data_dimension,))  # TODO: What is the input dimension of the encoder?\n","\n","\n","# Define the decoder network.\n","init_decoder, decoder = serial(\n","    Dense(256),\n","    Relu,\n","    Dense(128),\n","    Relu,\n","    Dense(data_dimension),    # TODO: Output logit of Ber(x|z)\n",")\n","_, init_decoder_params = init_decoder(rng, input_shape=(latent_dimension,))      # TODO: What is the input dimension of the decoder?\n","\n","\n","# Set up log likelihood function.\n","def bernoulli_logpdf(logits, x):\n","  \"\"\"Bernoulli log pdf of data x given logits.\"\"\"\n","  return -np.sum(np.logaddexp(0., np.where(x, -1., 1.) * logits))\n","\n","def log_likelihood(decoder_params, latent, datapoint): # TODO\n","  logits = decoder(decoder_params, latent)\n","  return bernoulli_logpdf(logits, datapoint)\n","\n","def log_joint(decoder_params, latent, datapoint): # TODO\n","  return log_prior(latent) + log_likelihood(decoder_params, latent, datapoint)\n","\n","# Run optimization\n","optimizer=optimizers.adam\n","optimizer_kwargs=dict(step_size=1e-2)\n","n_iters = 5000\n","minibatch_size = 200\n","\n","opt_init, opt_update, get_params = optimizer(**optimizer_kwargs)\n","opt_state = opt_init((init_recognition_params, init_decoder_params))\n","\n","def objective(params, t):  # The loss function to be minimized.  \n","  rng = random.PRNGKey(t)\n","  minibatch_ixs = random.choice(rng, train_images.shape[0], (minibatch_size,))\n","  minibatch = train_images[minibatch_ixs, :] # TODO\n","  recognition_params, decoder_params = params # TODO\n","  return -batch_elbo( # TODO \n","    recognition_net,\n","    log_joint,\n","    recognition_params,  # a.k.a. phi\n","    decoder_params,      # a.k.a. theta\n","    minibatch,\n","    rng)\n","  \n","def callback(params, t):\n","  if t % 100 == 0:\n","    print(\"Iteration {} lower bound {}\".format(t, -objective(params, t)))\n","\n","@jit\n","def update(i, opt_state):\n","    params = get_params(opt_state) \n","    gradient = grad(objective)(params, i)\n","    return opt_update(i, gradient, opt_state)\n","\n","# Main loop.\n","print(\"Optimizing variational parameters...\")\n","for t in trange(0, n_iters):\n","    opt_state = update(t, opt_state)\n","    params = get_params(opt_state)\n","    callback(params, t)\n","\n","recognition_params, decoder_params = params\n","# ==========================================\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":934,"referenced_widgets":["1b40039a8fbb461497360daa4f9a26f0","e0e5564a277246a395ae278a6a7008d5","b41a1dee3a3949b0bf55e6f78a71bb55","4167e992382641f4b7fc142b1b17746b","1f64634cf82e4a7fb1ce80e3cec7a026","a752aa8cf72445da8e7a90ba41dddada","ed9f2c93a4154706a6363aba069794e3","0c9b0904a67e435f84ad2a746541b4a8","0b88d19e4cac43c6ba6a0a9cf423efef","a8186933616245c3bce40493515b2b29","19385121cbd64b5ba6aea1ef84f5aa86"]},"id":"A2_pkMooOr1C","executionInfo":{"status":"ok","timestamp":1649284248770,"user_tz":240,"elapsed":65881,"user":{"displayName":"Lisa Yu","userId":"02835623436724771541"}},"outputId":"271c069a-8c1b-4cc5-e7b4-120d3a826337"},"execution_count":30,"outputs":[{"output_type":"stream","name":"stdout","text":["Optimizing variational parameters...\n"]},{"output_type":"display_data","data":{"text/plain":["  0%|          | 0/5000 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"1b40039a8fbb461497360daa4f9a26f0"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Iteration 0 lower bound -483.45465087890625\n","Iteration 100 lower bound -184.47845458984375\n","Iteration 200 lower bound -152.44837951660156\n","Iteration 300 lower bound -131.06845092773438\n","Iteration 400 lower bound -130.7201385498047\n","Iteration 500 lower bound -123.58916473388672\n","Iteration 600 lower bound -116.07241821289062\n","Iteration 700 lower bound -121.53189086914062\n","Iteration 800 lower bound -118.37284851074219\n","Iteration 900 lower bound -114.75482177734375\n","Iteration 1000 lower bound -118.1535873413086\n","Iteration 1100 lower bound -115.42605590820312\n","Iteration 1200 lower bound -115.95195007324219\n","Iteration 1300 lower bound -117.57740783691406\n","Iteration 1400 lower bound -113.8509750366211\n","Iteration 1500 lower bound -114.87775421142578\n","Iteration 1600 lower bound -114.8045883178711\n","Iteration 1700 lower bound -117.07209777832031\n","Iteration 1800 lower bound -115.65538024902344\n","Iteration 1900 lower bound -113.34435272216797\n","Iteration 2000 lower bound -115.60564422607422\n","Iteration 2100 lower bound -111.14693450927734\n","Iteration 2200 lower bound -114.17886352539062\n","Iteration 2300 lower bound -116.88706970214844\n","Iteration 2400 lower bound -109.43632507324219\n","Iteration 2500 lower bound -106.37615966796875\n","Iteration 2600 lower bound -114.08441162109375\n","Iteration 2700 lower bound -111.46846771240234\n","Iteration 2800 lower bound -113.26200866699219\n","Iteration 2900 lower bound -110.81475067138672\n","Iteration 3000 lower bound -113.08338928222656\n","Iteration 3100 lower bound -105.3531723022461\n","Iteration 3200 lower bound -111.24400329589844\n","Iteration 3300 lower bound -108.89632415771484\n","Iteration 3400 lower bound -115.88832092285156\n","Iteration 3500 lower bound -110.90665435791016\n","Iteration 3600 lower bound -110.51006317138672\n","Iteration 3700 lower bound -107.59300231933594\n","Iteration 3800 lower bound -106.80522155761719\n","Iteration 3900 lower bound -109.516845703125\n","Iteration 4000 lower bound -118.4428482055664\n","Iteration 4100 lower bound -105.92135620117188\n","Iteration 4200 lower bound -115.21021270751953\n","Iteration 4300 lower bound -106.79814147949219\n","Iteration 4400 lower bound -110.62794494628906\n","Iteration 4500 lower bound -117.80767059326172\n","Iteration 4600 lower bound -110.33204650878906\n","Iteration 4700 lower bound -108.98331451416016\n","Iteration 4800 lower bound -115.51634216308594\n","Iteration 4900 lower bound -109.87783813476562\n"]}]},{"cell_type":"code","source":["print(-objective(params, n_iters))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ghC7WLLNPT1D","executionInfo":{"status":"ok","timestamp":1649284250580,"user_tz":240,"elapsed":424,"user":{"displayName":"Lisa Yu","userId":"02835623436724771541"}},"outputId":"fc51343b-3d4d-4cd9-9a1b-569e10bc2091"},"execution_count":31,"outputs":[{"output_type":"stream","name":"stdout","text":["-112.677284\n"]}]},{"cell_type":"code","source":["# Change 3: changed learning rate from 1e-2 to 1e-3\n","\n","data_dimension = 28*28\n","latent_dimension = 20\n","key = random.PRNGKey(0)\n","\n","# Define the recognition network.\n","# We implement the functions as a split output of a 1-layer MLP\n","# https://github.com/google/jax/blob/master/jax/experimental/README.md#neural-net-building-with-stax\n","init_recognize, recognition_net = serial(\n","    Dense(150),\n","    Relu,\n","    Dense(50),\n","    Relu,\n","    FanOut(2),\n","    parallel(\n","        Dense(latent_dimension),   # Output mean of q(z)\n","        Dense(latent_dimension)    # Output log_std of q(z)\n","        )\n","    )\n","_, init_recognition_params = init_recognize(rng, input_shape=(data_dimension,))  # TODO: What is the input dimension of the encoder?\n","\n","\n","# Define the decoder network.\n","init_decoder, decoder = serial(\n","    Dense(150),\n","    Relu,\n","    Dense(50),\n","    Relu,\n","    Dense(data_dimension),    # TODO: Output logit of Ber(x|z)\n",")\n","_, init_decoder_params = init_decoder(rng, input_shape=(latent_dimension,))      # TODO: What is the input dimension of the decoder?\n","\n","\n","# Set up log likelihood function.\n","def bernoulli_logpdf(logits, x):\n","  \"\"\"Bernoulli log pdf of data x given logits.\"\"\"\n","  return -np.sum(np.logaddexp(0., np.where(x, -1., 1.) * logits))\n","\n","def log_likelihood(decoder_params, latent, datapoint): # TODO\n","  logits = decoder(decoder_params, latent)\n","  return bernoulli_logpdf(logits, datapoint)\n","\n","def log_joint(decoder_params, latent, datapoint): # TODO\n","  return log_prior(latent) + log_likelihood(decoder_params, latent, datapoint)\n","\n","# Run optimization\n","optimizer=optimizers.adam\n","optimizer_kwargs=dict(step_size=1e-3)\n","n_iters = 5000\n","minibatch_size = 200\n","\n","opt_init, opt_update, get_params = optimizer(**optimizer_kwargs)\n","opt_state = opt_init((init_recognition_params, init_decoder_params))\n","\n","def objective(params, t):  # The loss function to be minimized.  \n","  rng = random.PRNGKey(t)\n","  minibatch_ixs = random.choice(rng, train_images.shape[0], (minibatch_size,))\n","  minibatch = train_images[minibatch_ixs, :] # TODO\n","  recognition_params, decoder_params = params # TODO\n","  return -batch_elbo( # TODO \n","    recognition_net,\n","    log_joint,\n","    recognition_params,  # a.k.a. phi\n","    decoder_params,      # a.k.a. theta\n","    minibatch,\n","    rng)\n","  \n","def callback(params, t):\n","  if t % 100 == 0:\n","    print(\"Iteration {} lower bound {}\".format(t, -objective(params, t)))\n","\n","@jit\n","def update(i, opt_state):\n","    params = get_params(opt_state) \n","    gradient = grad(objective)(params, i)\n","    return opt_update(i, gradient, opt_state)\n","\n","# Main loop.\n","print(\"Optimizing variational parameters...\")\n","for t in trange(0, n_iters):\n","    opt_state = update(t, opt_state)\n","    params = get_params(opt_state)\n","    callback(params, t)\n","\n","recognition_params, decoder_params = params\n","# ==========================================\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":934,"referenced_widgets":["5896ab0629ad445d9b9414735429c025","7a0dab329df148a0b1be335913efb677","d8d724093dfd40d5bd4b8d038d4690cd","dcc116a7ba364cd38caf2a5b96e2c2d9","fd5c451ed41f4bad92513655b1a7346a","9e9424fea9b244b0adf80f7f01433b2b","f1702554513e44ad8eeb106039f19e46","bf0319ac0664401e80f60eebc6448a8a","e854a7eab6644a1db2771af65e0770fe","51f0b91bc33a45af9bf1106ad72ff21a","98dca5d38bad4fec91f03be26ed87ddc"]},"id":"qOf6w-nFc77t","executionInfo":{"status":"ok","timestamp":1649284353275,"user_tz":240,"elapsed":55501,"user":{"displayName":"Lisa Yu","userId":"02835623436724771541"}},"outputId":"baf5f987-d119-425d-d995-0cc54d50c1d6"},"execution_count":32,"outputs":[{"output_type":"stream","name":"stdout","text":["Optimizing variational parameters...\n"]},{"output_type":"display_data","data":{"text/plain":["  0%|          | 0/5000 [00:00<?, ?it/s]"],"application/vnd.jupyter.widget-view+json":{"version_major":2,"version_minor":0,"model_id":"5896ab0629ad445d9b9414735429c025"}},"metadata":{}},{"output_type":"stream","name":"stdout","text":["Iteration 0 lower bound -544.199951171875\n","Iteration 100 lower bound -204.34381103515625\n","Iteration 200 lower bound -194.31793212890625\n","Iteration 300 lower bound -186.80816650390625\n","Iteration 400 lower bound -179.0545654296875\n","Iteration 500 lower bound -164.4827117919922\n","Iteration 600 lower bound -150.29019165039062\n","Iteration 700 lower bound -150.8247833251953\n","Iteration 800 lower bound -144.8153839111328\n","Iteration 900 lower bound -135.78504943847656\n","Iteration 1000 lower bound -135.02073669433594\n","Iteration 1100 lower bound -131.06163024902344\n","Iteration 1200 lower bound -126.56593322753906\n","Iteration 1300 lower bound -125.17548370361328\n","Iteration 1400 lower bound -121.41807556152344\n","Iteration 1500 lower bound -119.7712173461914\n","Iteration 1600 lower bound -121.65496063232422\n","Iteration 1700 lower bound -120.99945068359375\n","Iteration 1800 lower bound -115.30796813964844\n","Iteration 1900 lower bound -114.40265655517578\n","Iteration 2000 lower bound -116.11497497558594\n","Iteration 2100 lower bound -111.28538513183594\n","Iteration 2200 lower bound -112.03157806396484\n","Iteration 2300 lower bound -114.3149185180664\n","Iteration 2400 lower bound -107.0763168334961\n","Iteration 2500 lower bound -103.7110824584961\n","Iteration 2600 lower bound -109.83499908447266\n","Iteration 2700 lower bound -107.50579833984375\n","Iteration 2800 lower bound -108.62680053710938\n","Iteration 2900 lower bound -105.10966491699219\n","Iteration 3000 lower bound -108.14450073242188\n","Iteration 3100 lower bound -99.75191497802734\n","Iteration 3200 lower bound -104.63428497314453\n","Iteration 3300 lower bound -102.06450653076172\n","Iteration 3400 lower bound -107.22234344482422\n","Iteration 3500 lower bound -104.90674591064453\n","Iteration 3600 lower bound -104.87173461914062\n","Iteration 3700 lower bound -100.56658935546875\n","Iteration 3800 lower bound -101.19640350341797\n","Iteration 3900 lower bound -101.55048370361328\n","Iteration 4000 lower bound -110.30908966064453\n","Iteration 4100 lower bound -99.37521362304688\n","Iteration 4200 lower bound -106.43284606933594\n","Iteration 4300 lower bound -100.19503021240234\n","Iteration 4400 lower bound -102.81898498535156\n","Iteration 4500 lower bound -106.86409759521484\n","Iteration 4600 lower bound -100.87637329101562\n","Iteration 4700 lower bound -99.9403305053711\n","Iteration 4800 lower bound -103.45380401611328\n","Iteration 4900 lower bound -98.96478271484375\n"]}]},{"cell_type":"code","source":["print(-objective(params, n_iters))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"amQJzyLhdYYz","executionInfo":{"status":"ok","timestamp":1649284355249,"user_tz":240,"elapsed":483,"user":{"displayName":"Lisa Yu","userId":"02835623436724771541"}},"outputId":"1c6c2c4f-1147-4d98-cc9f-a9ba13432ca9"},"execution_count":33,"outputs":[{"output_type":"stream","name":"stdout","text":["-99.54614\n"]}]},{"cell_type":"markdown","source":["# Q5\n","\n","Please fill out the course evaluations. We would appreciate your feedback on the course materials, assignments, structure, delivery etc."],"metadata":{"id":"MZfiOaXW97o7"}}]}